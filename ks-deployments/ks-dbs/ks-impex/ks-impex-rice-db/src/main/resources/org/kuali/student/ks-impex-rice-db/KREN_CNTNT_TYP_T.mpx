CNTNT_TYP_ID,NM,CUR_IND,CNTNT_TYP_VER_NBR,DESC_TXT,NMSPC_CD,XSD,XSL,VER_NBR,OBJ_ID
"1","Simple","T","0","Simple content type","notification/ContentTypeSimple","<?xml version=${mpx.quote}1.0${mpx.quote} encoding=${mpx.quote}UTF-8${mpx.quote}?>${mpx.lf}<!-- This schema describes a simple notification.  It only contains a content${mpx.lf}element which is a String...about as simple as one can get -->${mpx.lf}<schema xmlns=${mpx.quote}http://www.w3.org/2001/XMLSchema${mpx.quote}${mpx.lf}  xmlns:c=${mpx.quote}ns:notification/common${mpx.quote}${mpx.lf}  xmlns:cs=${mpx.quote}ns:notification/ContentTypeSimple${mpx.quote}${mpx.lf}  targetNamespace=${mpx.quote}ns:notification/ContentTypeSimple${mpx.quote}${mpx.lf}  attributeFormDefault=${mpx.quote}unqualified${mpx.quote} ${mpx.lf}    elementFormDefault=${mpx.quote}qualified${mpx.quote}>${mpx.lf}  <annotation>${mpx.lf}    <documentation xml:lang=${mpx.quote}en${mpx.quote}>${mpx.lf}      Simple Content Schema${mpx.lf}    </documentation>${mpx.lf}  </annotation>${mpx.lf}  <import namespace=${mpx.quote}ns:notification/common${mpx.quote} schemaLocation=${mpx.quote}resource:notification/notification-common${mpx.quote} />${mpx.lf}  <!--  The content element is just a String -->${mpx.lf}  <element name=${mpx.quote}content${mpx.quote}>${mpx.lf}    <complexType>${mpx.lf}      <sequence>${mpx.lf}        <element name=${mpx.quote}message${mpx.quote} type=${mpx.quote}c:LongStringType${mpx.quote}/>${mpx.lf}      </sequence>${mpx.lf}    </complexType>${mpx.lf}  </element>${mpx.lf}</schema>","<?xml version=${mpx.quote}1.0${mpx.quote} encoding=${mpx.quote}UTF-8${mpx.quote}?>${mpx.lf}<xsl:stylesheet${mpx.lf}   version=${mpx.quote}1.0${mpx.quote} ${mpx.lf}   xmlns:xsl=${mpx.quote}http://www.w3.org/1999/XSL/Transform${mpx.quote} ${mpx.lf}   xmlns:n=${mpx.quote}ns:notification/ContentTypeSimple${mpx.quote} ${mpx.lf}   xmlns:xsi=${mpx.quote}http://www.w3.org/2001/XMLSchema-instance${mpx.quote} ${mpx.lf}   xsi:schemaLocation=${mpx.quote}ns:notification/ContentTypeSimple resource:notification/ContentTypeSimple${mpx.quote} ${mpx.lf}   exclude-result-prefixes=${mpx.quote}n xsi${mpx.quote}>${mpx.lf}   <xsl:output method=${mpx.quote}html${mpx.quote} omit-xml-declaration=${mpx.quote}yes${mpx.quote} />${mpx.lf}   <xsl:template match=${mpx.quote}/n:content/n:message${mpx.quote}>${mpx.lf}      <strong>${mpx.lf}          <xsl:value-of select=${mpx.quote}.${mpx.quote} disable-output-escaping=${mpx.quote}yes${mpx.quote}/>${mpx.lf}      </strong>${mpx.lf}   </xsl:template>${mpx.lf}</xsl:stylesheet>","1","${mpx.null}"
"2","Event","T","0","Event content type","notification/ContentTypeEvent","<?xml version=${mpx.quote}1.0${mpx.quote} encoding=${mpx.quote}UTF-8${mpx.quote}?>${mpx.lf}<!-- This schema defines an generic event notification type in order for it${mpx.lf}to be accepted into the system. -->${mpx.lf}<schema xmlns=${mpx.quote}http://www.w3.org/2001/XMLSchema${mpx.quote} xmlns:c=${mpx.quote}ns:notification/common${mpx.quote} xmlns:ce=${mpx.quote}ns:notification/ContentTypeEvent${mpx.quote} targetNamespace=${mpx.quote}ns:notification/ContentTypeEvent${mpx.quote} attributeFormDefault=${mpx.quote}unqualified${mpx.quote} elementFormDefault=${mpx.quote}qualified${mpx.quote}>${mpx.lf}  <annotation>${mpx.lf}    <documentation xml:lang=${mpx.quote}en${mpx.quote}>Content Event Schema</documentation>${mpx.lf}  </annotation>${mpx.lf}  <import namespace=${mpx.quote}ns:notification/common${mpx.quote} schemaLocation=${mpx.quote}resource:notification/notification-common${mpx.quote} />${mpx.lf}  <!-- The content element describes the content of the notification.  It${mpx.lf}  contains a message (a simple String) and a message element -->${mpx.lf}  <element name=${mpx.quote}content${mpx.quote}>${mpx.lf}    <complexType>${mpx.lf}      <sequence>${mpx.lf}        <element name=${mpx.quote}message${mpx.quote} type=${mpx.quote}c:LongStringType${mpx.quote}/>${mpx.lf}        <element ref=${mpx.quote}ce:event${mpx.quote}/>${mpx.lf}      </sequence>${mpx.lf}    </complexType>${mpx.lf}  </element>${mpx.lf}  <!-- This is the event element.  It describes a simple event type containing a${mpx.lf}  summary, description, location, and start/stop times -->${mpx.lf}  <element name=${mpx.quote}event${mpx.quote}>${mpx.lf}    <complexType>${mpx.lf}      <sequence>${mpx.lf}        <element name=${mpx.quote}summary${mpx.quote} type=${mpx.quote}c:NonEmptyShortStringType${mpx.quote} />${mpx.lf}        <element name=${mpx.quote}description${mpx.quote} type=${mpx.quote}c:NonEmptyShortStringType${mpx.quote} />${mpx.lf}        <element name=${mpx.quote}location${mpx.quote} type=${mpx.quote}c:NonEmptyShortStringType${mpx.quote} />${mpx.lf}        <element name=${mpx.quote}startDateTime${mpx.quote} type=${mpx.quote}c:NonEmptyShortStringType${mpx.quote} />${mpx.lf}        <element name=${mpx.quote}stopDateTime${mpx.quote} type=${mpx.quote}c:NonEmptyShortStringType${mpx.quote} />${mpx.lf}      </sequence>${mpx.lf}    </complexType>${mpx.lf}  </element>${mpx.lf}</schema>","<?xml version=${mpx.quote}1.0${mpx.quote} encoding=${mpx.quote}UTF-8${mpx.quote}?>${mpx.lf}<!-- style sheet declaration: be very careful editing the following, the${mpx.lf}     default namespace must be used otherwise elements will not match -->${mpx.lf}<xsl:stylesheet${mpx.lf}    version=${mpx.quote}1.0${mpx.quote} ${mpx.lf}    xmlns:xsl=${mpx.quote}http://www.w3.org/1999/XSL/Transform${mpx.quote} ${mpx.lf}    xmlns:n=${mpx.quote}ns:notification/ContentTypeEvent${mpx.quote} ${mpx.lf}    xmlns:xsi=${mpx.quote}http://www.w3.org/2001/XMLSchema-instance${mpx.quote} ${mpx.lf}    xsi:schemaLocation=${mpx.quote}ns:notification/ContentTypeEvent resource:notification/ContentTypeEvent${mpx.quote} ${mpx.lf}    exclude-result-prefixes=${mpx.quote}n xsi${mpx.quote}>${mpx.lf}    <!-- output an html fragment -->${mpx.lf}    <xsl:output method=${mpx.quote}html${mpx.quote} indent=${mpx.quote}yes${mpx.quote} />${mpx.lf}    <!-- match everything -->${mpx.lf}    <xsl:template match=${mpx.quote}/n:content${mpx.quote} >${mpx.lf}        <table class=${mpx.quote}bord-all${mpx.quote}>${mpx.lf}            <xsl:apply-templates />${mpx.lf}        </table>${mpx.lf}    </xsl:template>${mpx.lf}    <!--  match message element in the default namespace and render as strong -->${mpx.lf}    <xsl:template match=${mpx.quote}n:message${mpx.quote} >${mpx.lf}        <caption>${mpx.lf}            <strong><xsl:value-of select=${mpx.quote}.${mpx.quote} disable-output-escaping=${mpx.quote}yes${mpx.quote}/></strong>${mpx.lf}        </caption>${mpx.lf}    </xsl:template>${mpx.lf}    <!-- match on event in the default namespace and display all children -->${mpx.lf}    <xsl:template match=${mpx.quote}n:event${mpx.quote}>${mpx.lf}        <tr>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><strong>Summary: </strong></td>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><xsl:value-of select=${mpx.quote}n:summary${mpx.quote} /></td>${mpx.lf}        </tr>${mpx.lf}        <tr>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><strong>Description: </strong></td>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><xsl:value-of select=${mpx.quote}n:description${mpx.quote} /></td>${mpx.lf}        </tr>${mpx.lf}        <tr>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><strong>Location: </strong></td>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><xsl:value-of select=${mpx.quote}n:location${mpx.quote} /></td>${mpx.lf}        </tr>${mpx.lf}        <tr>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><strong>Start Time: </strong></td>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><xsl:value-of select=${mpx.quote}n:startDateTime${mpx.quote} /></td>${mpx.lf}        </tr>${mpx.lf}        <tr>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><strong>End Time: </strong></td>${mpx.lf}            <td class=${mpx.quote}thnormal${mpx.quote}><xsl:value-of select=${mpx.quote}n:stopDateTime${mpx.quote} /></td>${mpx.lf}        </tr>${mpx.lf}    </xsl:template> ${mpx.lf}</xsl:stylesheet>","1","${mpx.null}"
