STYLE_ID,NM,XML,ACTV_IND,VER_NBR,OBJ_ID
"2020","widgets","<xsl:stylesheet xmlns:my-class=${mpx.quote}xalan://org.kuali.rice.edl.framework.util.EDLFunctions${mpx.quote} xmlns:xsl=${mpx.quote}http://www.w3.org/1999/XSL/Transform${mpx.quote} version=${mpx.quote}1.0${mpx.quote}>${mpx.lf}				<xsl:output method=${mpx.quote}html${mpx.quote} version=${mpx.quote}4.01${mpx.quote}/>${mpx.lf}				<xsl:variable name=${mpx.quote}globalReadOnly${mpx.quote} select=${mpx.quote}/documentContent/documentState/editable != 'true'${mpx.quote}/>${mpx.lf}				<!-- determined by an appconstant -->${mpx.lf}				<xsl:variable name=${mpx.quote}showAttachments${mpx.quote} select=${mpx.quote}/documentContent/documentState/showAttachments${mpx.quote}/>${mpx.lf}				<xsl:strip-space elements=${mpx.quote}*${mpx.quote}/>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}widget_render${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}default${mpx.quote}/>${mpx.lf}					<xsl:for-each select=${mpx.quote}//fieldDef[@name=$fieldName]${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}position() != 1${mpx.quote}>${mpx.lf}								<h4>${mpx.lf}									<font color=${mpx.quote}#FF0000${mpx.quote}> fieldDef Name:  <xsl:value-of select=${mpx.quote}$fieldName${mpx.quote}/> is  duplicated ! </font>${mpx.lf}								</h4>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<xsl:variable name=${mpx.quote}input_type${mpx.quote} select=${mpx.quote}display/type${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}render${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}$renderCmd${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$renderCmd${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}											<xsl:value-of select=${mpx.quote}'all'${mpx.quote}/>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:variable name=${mpx.quote}vAlign${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}$align${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$align${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}											<xsl:value-of select=${mpx.quote}'horizontal'${mpx.quote}/>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:comment>* For JavaScript validation</xsl:comment>${mpx.lf}								<xsl:variable name=${mpx.quote}fieldDisplayName${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}@title${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}@title${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}											<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:variable name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}my-class:escapeJavascript(validation/regex)${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}validation/customValidator${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}validation/@required = 'true'${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}message${mpx.quote}>${mpx.lf}									<!-- <xsl:if test=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]${mpx.quote}> -->${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]/errorMessage${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]/errorMessage${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:when test=${mpx.quote}//documentState/fieldError[@key=current()/@name]${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}//documentState/fieldError[@key=current()/@name]${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:when test=${mpx.quote}validation/message${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}validation/message${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:when test=${mpx.quote}validation/regex${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$fieldDisplayName${mpx.quote}/> (<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>) <xsl:text> does not match '</xsl:text> <xsl:value-of select=${mpx.quote}$regex${mpx.quote}/> <xsl:text>'</xsl:text>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}									    <xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name]${mpx.quote}/>${mpx.lf}											<xsl:comment>* Dropped Through and Hit Otherwise</xsl:comment>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}									<!-- </xsl:if> -->${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:variable name=${mpx.quote}custommessage${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]/errorMessage${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]/errorMessage${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>NONE</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}${mpx.lf}								<xsl:comment>* custom message: <xsl:value-of select=${mpx.quote}$custommessage${mpx.quote}/>${mpx.lf}</xsl:comment>${mpx.lf}								<xsl:comment>* validation/message: <xsl:value-of select=${mpx.quote}validation/message${mpx.quote}/>${mpx.lf}</xsl:comment>${mpx.lf}								<xsl:comment>* message: <xsl:value-of select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}</xsl:comment>${mpx.lf}								<xsl:variable name=${mpx.quote}hasFieldError${mpx.quote} select=${mpx.quote}//documentState/fieldError[@key=current()/@name]${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]/@invalid${mpx.quote}/>${mpx.lf}								<!--${mpx.lf}									determine value to display: use the value specified in the current version	if it exists, otherwise use the 'default'${mpx.lf}									value defined in the field or if specified use data from userSession${mpx.lf}								-->${mpx.lf}								<xsl:variable name=${mpx.quote}userValue${mpx.quote} select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/@name]/value${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}boolean($userValue)${mpx.quote}/>${mpx.lf}								<xsl:variable name=${mpx.quote}value${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}$hasUserValue${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$userValue${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:when test=${mpx.quote}$default${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$default${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}											<xsl:value-of select=${mpx.quote}value${mpx.quote}/>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}								<!-- message row -->${mpx.lf}								<xsl:variable name=${mpx.quote}type${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}($invalid and $validation_required) or $hasFieldError${mpx.quote}>error</xsl:when>${mpx.lf}										<xsl:when test=${mpx.quote}$invalid and not($validation_required)${mpx.quote}>warning</xsl:when>${mpx.lf}										<xsl:otherwise>empty</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:comment>* type: <xsl:value-of select=${mpx.quote}$type${mpx.quote}/>${mpx.lf}</xsl:comment>${mpx.lf}								<!--${mpx.lf}									<tr class=${mpx.quote}{$type}_messageRow${mpx.quote} id=${mpx.quote}{@name}_messageRow${mpx.quote}>${mpx.lf}										<td class=${mpx.quote}{$type}_messageHeaderCell${mpx.quote} id=${mpx.quote}{@name}_messageHeaderCell${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$type${mpx.quote}/>${mpx.lf}										</td>${mpx.lf}										<td class=${mpx.quote}{$type}_messageDataCell${mpx.quote} id=${mpx.quote}{@name}_messageDataCell${mpx.quote}>${mpx.lf}											<span id=${mpx.quote}{@name}_message${mpx.quote}>${mpx.lf}												<xsl:value-of select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											</span>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}								-->${mpx.lf}${mpx.lf}${mpx.lf}								<xsl:choose>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='text'${mpx.quote}>${mpx.lf}										<xsl:comment>* input_type 'text'</xsl:comment>${mpx.lf}										<xsl:call-template name=${mpx.quote}textbox_render${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$render${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$vAlign${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}readOnly${mpx.quote}>${mpx.lf}                                                <xsl:choose>${mpx.lf}                                                    <xsl:when test=${mpx.quote}//fieldDef[@name=$fieldName]/lookup/lookupReadOnly = 'true'${mpx.quote}>true</xsl:when>${mpx.lf}                                                    <xsl:otherwise>${mpx.lf}<xsl:value-of select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}</xsl:otherwise>${mpx.lf}                                                </xsl:choose>${mpx.lf}                                            </xsl:with-param>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='password'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}textbox_render${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$render${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$vAlign${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='radio'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}radio_render${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$render${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$vAlign${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}readOnly${mpx.quote} select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='checkbox'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}checkbox_render${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$render${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$vAlign${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}readOnly${mpx.quote} select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='select'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}select_input${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$render${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$vAlign${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}readOnly${mpx.quote} select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='select_refresh'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}select_input${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$render${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$vAlign${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}readOnly${mpx.quote} select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}refreshPage${mpx.quote} select=${mpx.quote}'true'${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='textarea'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}textarea_input${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$renderCmd${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$align${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}readOnly${mpx.quote} select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customFunction${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='button'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}button_input${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$renderCmd${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$align${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='submit button'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}submitbutton_input${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}renderCmd${mpx.quote} select=${mpx.quote}$renderCmd${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}align${mpx.quote} select=${mpx.quote}$align${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}hasUserValue${mpx.quote} select=${mpx.quote}$hasUserValue${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}invalid${mpx.quote} select=${mpx.quote}$invalid${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}regex${mpx.quote} select=${mpx.quote}$regex${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}customValidator${mpx.quote} select=${mpx.quote}$customValidator${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}message${mpx.quote} select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}validation_required${mpx.quote} select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:when test=${mpx.quote}$input_type='hidden'${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}											<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}											<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}										</xsl:call-template>${mpx.lf}									</xsl:when>${mpx.lf}								</xsl:choose>${mpx.lf}								<xsl:if test=${mpx.quote}$renderCmd='all' or $renderCmd='input'${mpx.quote}>${mpx.lf}                                    <xsl:call-template name=${mpx.quote}lookup${mpx.quote}>${mpx.lf}                                      <xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}                                      <xsl:with-param name=${mpx.quote}readOnly${mpx.quote} select=${mpx.quote}$readOnly${mpx.quote}/>${mpx.lf}                                    </xsl:call-template>${mpx.lf}									<span class=${mpx.quote}{$type}Message${mpx.quote} id=${mpx.quote}{@name}_messageHeaderCell${mpx.quote}>${mpx.lf}										<xsl:text> </xsl:text>${mpx.lf}<xsl:value-of select=${mpx.quote}$type${mpx.quote}/>${mpx.lf}<xsl:text>: </xsl:text>${mpx.lf}									</span>${mpx.lf}									<span class=${mpx.quote}{$type}Message${mpx.quote} id=${mpx.quote}{@name}_message${mpx.quote}>${mpx.lf}										<xsl:value-of select=${mpx.quote}$message${mpx.quote}/>${mpx.lf}									</span>${mpx.lf}									<xsl:if test=${mpx.quote}validation/regex or validation/customValidator or validation[@required='true']${mpx.quote}>${mpx.lf}										<xsl:if test=${mpx.quote}not(validation/customValidator)${mpx.quote}>${mpx.lf}											<script type=${mpx.quote}text/javascript${mpx.quote}>${mpx.lf}												// register field for regex checking${mpx.lf}												register(${mpx.quote}<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>${mpx.quote},${mpx.quote}<xsl:value-of select=${mpx.quote}$fieldDisplayName${mpx.quote}/>${mpx.quote},${mpx.quote}<xsl:value-of select=${mpx.quote}$regex${mpx.quote}/>${mpx.quote},${mpx.quote}<xsl:value-of select=${mpx.quote}$message${mpx.quote}/>${mpx.quote},${mpx.quote}<xsl:value-of select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.quote});${mpx.lf}											</script>${mpx.lf}										</xsl:if>${mpx.lf}										<xsl:if test=${mpx.quote}validation/customValidator${mpx.quote}>${mpx.lf}											<script type=${mpx.quote}text/javascript${mpx.quote}>${mpx.lf}												// register field for custom field checking${mpx.lf}												register_custom(${mpx.quote}<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>${mpx.quote},${mpx.quote}<xsl:value-of select=${mpx.quote}$fieldDisplayName${mpx.quote}/>${mpx.quote},${mpx.quote}<xsl:value-of select=${mpx.quote}$message${mpx.quote}/>${mpx.quote}, ${mpx.quote}<xsl:value-of select=${mpx.quote}$validation_required${mpx.quote}/>${mpx.quote}, <xsl:value-of select=${mpx.quote}$customValidator${mpx.quote}/>);${mpx.lf}											</script>${mpx.lf}										</xsl:if>${mpx.lf}									</xsl:if>${mpx.lf}								</xsl:if>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:for-each>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}textbox_render${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}hasUserValue${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}regex${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}message${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}validation_required${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all' or  $renderCmd='title'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:if test=${mpx.quote}$align ='horizontal'${mpx.quote}>${mpx.lf}							<xsl:text>          </xsl:text>${mpx.lf}						</xsl:if>${mpx.lf}						<xsl:if test=${mpx.quote}$align='vertical'${mpx.quote}>${mpx.lf}							<br/>${mpx.lf}						</xsl:if>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all' or $renderCmd='input'${mpx.quote}>${mpx.lf}						<xsl:if test=${mpx.quote}$globalReadOnly = 'true' or $readOnly = 'true'${mpx.quote}>${mpx.lf}							<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}								<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}								<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}							</xsl:call-template>${mpx.lf}						</xsl:if>${mpx.lf}						<input value=${mpx.quote}{$value}${mpx.quote}>${mpx.lf}							<xsl:if test=${mpx.quote}$customFunction${mpx.quote}>${mpx.lf}							  <xsl:variable name=${mpx.quote}customFunction_val${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  <xsl:attribute name=${mpx.quote}onkeyup${mpx.quote}>${mpx.lf}							    <xsl:value-of select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  </xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:if test=${mpx.quote}$globalReadOnly = 'true' or $readOnly = 'true'${mpx.quote}>${mpx.lf}								<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>${mpx.lf}								  disabled${mpx.lf}								</xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:attribute name=${mpx.quote}type${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}current()/display/type${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							<xsl:attribute name=${mpx.quote}name${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							<xsl:attribute name=${mpx.quote}onkeydown${mpx.quote}>return replaceEnter(event)</xsl:attribute>${mpx.lf}							<xsl:for-each select=${mpx.quote}current()/display/meta${mpx.quote}>${mpx.lf}								<xsl:variable name=${mpx.quote}attrName${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}name${mpx.quote}/>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:variable name=${mpx.quote}attrValue${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}value${mpx.quote}/>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:attribute name=${mpx.quote}{$attrName}${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}$attrValue${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							</xsl:for-each>${mpx.lf}						</input>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}radio_render${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}hasUserValue${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all' or  $renderCmd='title'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:if test=${mpx.quote}$align ='horizontal'${mpx.quote}>${mpx.lf}							<xsl:text>            </xsl:text>${mpx.lf}						</xsl:if>${mpx.lf}						<xsl:if test=${mpx.quote}$align='vertical'${mpx.quote}>${mpx.lf}							<br/>${mpx.lf}						</xsl:if>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$globalReadOnly = 'true' or $readOnly = 'true'${mpx.quote}>${mpx.lf}						<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}							<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}							<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}						</xsl:call-template>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all' or $renderCmd='input'${mpx.quote}>${mpx.lf}						<xsl:for-each select=${mpx.quote}current()/display/values${mpx.quote}>${mpx.lf}							<xsl:variable name=${mpx.quote}title${mpx.quote}>${mpx.lf}								<xsl:choose>${mpx.lf}									<xsl:when test=${mpx.quote}@title${mpx.quote}>${mpx.lf}										<xsl:value-of select=${mpx.quote}@title${mpx.quote}/>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:otherwise>${mpx.lf}										<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>${mpx.lf}									</xsl:otherwise>${mpx.lf}								</xsl:choose>${mpx.lf}							</xsl:variable>${mpx.lf}							<xsl:variable name=${mpx.quote}optionName${mpx.quote}>${mpx.lf}								<xsl:value-of select=${mpx.quote}../../@name${mpx.quote}/>${mpx.lf}							</xsl:variable>${mpx.lf}							<input name=${mpx.quote}{$optionName}${mpx.quote} title=${mpx.quote}{$title}${mpx.quote} type=${mpx.quote}{../type}${mpx.quote} value=${mpx.quote}{.}${mpx.quote}>${mpx.lf}							<xsl:if test=${mpx.quote}$customFunction${mpx.quote}>${mpx.lf}							  <xsl:variable name=${mpx.quote}customFunction_val${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  <xsl:attribute name=${mpx.quote}onClick${mpx.quote}>${mpx.lf}							    <xsl:value-of select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  </xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}								<xsl:if test=${mpx.quote}$globalReadOnly = 'true' or $readOnly = 'true'${mpx.quote}>${mpx.lf}									<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}								</xsl:if>${mpx.lf}								<xsl:choose>${mpx.lf}									<xsl:when test=${mpx.quote}$hasUserValue${mpx.quote}>${mpx.lf}										<xsl:if test=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/../../@name and value=current()]${mpx.quote}>${mpx.lf}											<xsl:attribute name=${mpx.quote}checked${mpx.quote}>checked</xsl:attribute>${mpx.lf}										</xsl:if>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:otherwise>${mpx.lf}										<!-- use the default if no user values are specified -->${mpx.lf}										<xsl:if test=${mpx.quote}. = ../../value${mpx.quote}>${mpx.lf}											<xsl:attribute name=${mpx.quote}checked${mpx.quote}>checked</xsl:attribute>${mpx.lf}										</xsl:if>${mpx.lf}									</xsl:otherwise>${mpx.lf}								</xsl:choose>${mpx.lf}							</input>${mpx.lf}							<xsl:value-of select=${mpx.quote}$title${mpx.quote}/>${mpx.lf}							<xsl:if test=${mpx.quote}$align ='horizontal'${mpx.quote}>${mpx.lf}								<xsl:text>           </xsl:text>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:if test=${mpx.quote}$align='vertical'${mpx.quote}>${mpx.lf}								<br/>${mpx.lf}							</xsl:if>${mpx.lf}						</xsl:for-each>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}checkbox_render${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}hasUserValue${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all' or  $renderCmd='title'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:if test=${mpx.quote}$align ='horizontal'${mpx.quote}>${mpx.lf}							<xsl:text>          </xsl:text>${mpx.lf}						</xsl:if>${mpx.lf}						<xsl:if test=${mpx.quote}$align='vertical'${mpx.quote}>${mpx.lf}							<br/>${mpx.lf}						</xsl:if>${mpx.lf}					</xsl:if>${mpx.lf}					<!--${mpx.lf}						<xsl:if test=${mpx.quote}$globalReadOnly = 'true'  or $readOnly = 'true'${mpx.quote}>${mpx.lf}							<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}								<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}								<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}							</xsl:call-template>${mpx.lf}						</xsl:if>${mpx.lf}					-->${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all' or $renderCmd='input'${mpx.quote}>${mpx.lf}						<xsl:for-each select=${mpx.quote}current()/display/values${mpx.quote}>${mpx.lf}							<xsl:variable name=${mpx.quote}title${mpx.quote}>${mpx.lf}								<xsl:choose>${mpx.lf}									<xsl:when test=${mpx.quote}@title${mpx.quote}>${mpx.lf}										<xsl:value-of select=${mpx.quote}@title${mpx.quote}/>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:otherwise>${mpx.lf}										<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>${mpx.lf}									</xsl:otherwise>${mpx.lf}								</xsl:choose>${mpx.lf}							</xsl:variable>${mpx.lf}							<xsl:variable name=${mpx.quote}optionName${mpx.quote}>${mpx.lf}								<xsl:value-of select=${mpx.quote}../../@name${mpx.quote}/>${mpx.lf}							</xsl:variable>${mpx.lf}							<xsl:variable name=${mpx.quote}checked${mpx.quote}>${mpx.lf}								<xsl:choose>${mpx.lf}									<xsl:when test=${mpx.quote}$hasUserValue${mpx.quote}>true</xsl:when>${mpx.lf}									<!-- use the default if no user values are specified -->${mpx.lf}									<xsl:when test=${mpx.quote}. = ../../value${mpx.quote}>true</xsl:when>${mpx.lf}									<xsl:otherwise>false</xsl:otherwise>${mpx.lf}								</xsl:choose>${mpx.lf}							</xsl:variable>${mpx.lf}							<xsl:if test=${mpx.quote}($globalReadOnly = 'true'  or $readOnly = 'true') and $checked = 'true' ${mpx.quote}>${mpx.lf}								<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}									<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}									<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}.${mpx.quote}/>${mpx.lf}								</xsl:call-template>${mpx.lf}							</xsl:if>${mpx.lf}		  				<input name=${mpx.quote}{$optionName}${mpx.quote} type=${mpx.quote}{../type}${mpx.quote} value=${mpx.quote}{.}${mpx.quote}>${mpx.lf}							<xsl:if test=${mpx.quote}$customFunction${mpx.quote}>${mpx.lf}							  <xsl:variable name=${mpx.quote}customFunction_val${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  <xsl:attribute name=${mpx.quote}onClick${mpx.quote}>${mpx.lf}							    <xsl:value-of select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  </xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}								<xsl:if test=${mpx.quote}$globalReadOnly = 'true'  or $readOnly = 'true'${mpx.quote}>${mpx.lf}									<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}								</xsl:if>${mpx.lf}								<xsl:if test=${mpx.quote}$checked = 'true'${mpx.quote}>${mpx.lf}									<xsl:attribute name=${mpx.quote}checked${mpx.quote}>checked</xsl:attribute>${mpx.lf}								</xsl:if>${mpx.lf}							</input>${mpx.lf}							<xsl:value-of select=${mpx.quote}$title${mpx.quote}/>${mpx.lf}							<xsl:if test=${mpx.quote}$align ='horizontal'${mpx.quote}>${mpx.lf}								<xsl:text>           </xsl:text>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:if test=${mpx.quote}$align='vertical'${mpx.quote}>${mpx.lf}								<br/>${mpx.lf}							</xsl:if>${mpx.lf}						</xsl:for-each>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}select_input${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}hasUserValue${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}refreshPage${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='title' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$align='horizontal'${mpx.quote}>${mpx.lf}								<xsl:text>       </xsl:text>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<br/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$globalReadOnly = 'true' or $readOnly = 'true'${mpx.quote}>${mpx.lf}						<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}							<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}							<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}						</xsl:call-template>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='input' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<select name=${mpx.quote}{$fieldName}${mpx.quote}>${mpx.lf}							<xsl:if test=${mpx.quote}$customFunction${mpx.quote}>${mpx.lf}							  <xsl:variable name=${mpx.quote}customFunction_val${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  <xsl:attribute name=${mpx.quote}onChange${mpx.quote}>${mpx.lf}							    <xsl:value-of select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  </xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:if test=${mpx.quote}$globalReadOnly = 'true'  or $readOnly = 'true'${mpx.quote}>${mpx.lf}								<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:for-each select=${mpx.quote}current()/display/values${mpx.quote}>${mpx.lf}								<xsl:variable name=${mpx.quote}title${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}@title${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}@title${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:when test=${mpx.quote}@name${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}@name${mpx.quote}/>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}											<xsl:value-of select=${mpx.quote}.${mpx.quote}/>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}								</xsl:variable>${mpx.lf}								<option title=${mpx.quote}{$title}${mpx.quote} value=${mpx.quote}{.}${mpx.quote}>${mpx.lf}									<xsl:choose>${mpx.lf}										<xsl:when test=${mpx.quote}$hasUserValue${mpx.quote}>${mpx.lf}											<xsl:if test=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=current()/../../@name and value=current()]${mpx.quote}>${mpx.lf}												<!-- <xsl:if test=${mpx.quote}$value = current()${mpx.quote}> -->${mpx.lf}												<xsl:attribute name=${mpx.quote}selected${mpx.quote}>selected</xsl:attribute>${mpx.lf}											</xsl:if>${mpx.lf}										</xsl:when>${mpx.lf}										<xsl:otherwise>${mpx.lf}											<!-- use the default if no user values are specified -->${mpx.lf}											<xsl:if test=${mpx.quote}. = ../../value${mpx.quote}>${mpx.lf}												<xsl:attribute name=${mpx.quote}selected${mpx.quote}>selected</xsl:attribute>${mpx.lf}											</xsl:if>${mpx.lf}										</xsl:otherwise>${mpx.lf}									</xsl:choose>${mpx.lf}									<xsl:if test=${mpx.quote}. = ../../value${mpx.quote}>${mpx.lf}										<xsl:attribute name=${mpx.quote}selected${mpx.quote}>selected</xsl:attribute>${mpx.lf}									</xsl:if>${mpx.lf}									<xsl:value-of select=${mpx.quote}$title${mpx.quote}/>${mpx.lf}								</option>${mpx.lf}							</xsl:for-each>${mpx.lf}						</select>${mpx.lf}						<xsl:if test=${mpx.quote}$refreshPage = 'true'${mpx.quote}>${mpx.lf}						  <script type=${mpx.quote}text/javascript${mpx.quote}>${mpx.lf}						  	// register additional onchange event, use prototype to hide the main form and show a message so as to prevent changes while refreshing.${mpx.lf}						  	// programmers are to create the following divisions; html div; that wrap the main form and a seperate div wrapping the message that will show.${mpx.lf}							register_onchange('<xsl:value-of select=${mpx.quote}$fieldName${mpx.quote}/>', function() { $('mainform-div').hide(); $('refresh-message').show(); document.forms[0].submit(); });${mpx.lf}						  </script>${mpx.lf}						</xsl:if>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}textarea_input${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}regex${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}message${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}validation_required${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='title' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$globalReadOnly = 'true' or $readOnly = 'true'${mpx.quote}>${mpx.lf}						<xsl:call-template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}							<xsl:with-param name=${mpx.quote}fieldName${mpx.quote} select=${mpx.quote}$fieldName${mpx.quote}/>${mpx.lf}							<xsl:with-param name=${mpx.quote}value${mpx.quote} select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}						</xsl:call-template>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$align='horizontal'${mpx.quote}>${mpx.lf}								<xsl:text>       </xsl:text>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<br/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='input' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:variable name=${mpx.quote}metaCols${mpx.quote} select=${mpx.quote}display/meta[name='cols']/value${mpx.quote}/>${mpx.lf}						<xsl:variable name=${mpx.quote}cols${mpx.quote}>${mpx.lf}							<xsl:choose>${mpx.lf}								<xsl:when test=${mpx.quote}$metaCols${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}$metaCols${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:otherwise>1</xsl:otherwise>${mpx.lf}							</xsl:choose>${mpx.lf}						</xsl:variable>${mpx.lf}						<xsl:variable name=${mpx.quote}metaRows${mpx.quote} select=${mpx.quote}display/meta[name='rows']/value${mpx.quote}/>${mpx.lf}						<xsl:variable name=${mpx.quote}rows${mpx.quote}>${mpx.lf}							<xsl:choose>${mpx.lf}								<xsl:when test=${mpx.quote}$metaRows${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}$metaRows${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:otherwise>1</xsl:otherwise>${mpx.lf}							</xsl:choose>${mpx.lf}						</xsl:variable>${mpx.lf}						<textarea cols=${mpx.quote}{$cols}${mpx.quote} name=${mpx.quote}{@name}${mpx.quote} rows=${mpx.quote}{$rows}${mpx.quote}>${mpx.lf}							<xsl:if test=${mpx.quote}$customFunction${mpx.quote}>${mpx.lf}							  <xsl:variable name=${mpx.quote}customFunction_val${mpx.quote} select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  <xsl:attribute name=${mpx.quote}onkeyup${mpx.quote}>${mpx.lf}							    <xsl:value-of select=${mpx.quote}$customFunction${mpx.quote}/>${mpx.lf}							  </xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:if test=${mpx.quote}$globalReadOnly = 'true'  or $readOnly = 'true'${mpx.quote}>${mpx.lf}								<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<!--${mpx.lf}								force a space if value is empty, or browsers (firefox) set the rest of the literal body content as the value${mpx.lf}								if the tag is a short-form close tag (!)${mpx.lf}							-->${mpx.lf}							<xsl:choose>${mpx.lf}								<xsl:when test=${mpx.quote}string-length($value) &gt; 0${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:otherwise>${mpx.lf}									<xsl:text/>${mpx.lf}								</xsl:otherwise>${mpx.lf}							</xsl:choose>${mpx.lf}						</textarea>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}button_input${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='title' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$align='horizontal'${mpx.quote}>${mpx.lf}								<xsl:text>    </xsl:text>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<br/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='input' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<button name=${mpx.quote}{$fieldName}${mpx.quote}>${mpx.lf}							<xsl:variable name=${mpx.quote}value${mpx.quote} select=${mpx.quote}value${mpx.quote}/>${mpx.lf}							<xsl:if test=${mpx.quote}$value${mpx.quote}>${mpx.lf}								<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:for-each select=${mpx.quote}current()/display/meta${mpx.quote}>${mpx.lf}								<xsl:variable name=${mpx.quote}attr_name${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}name${mpx.quote}/>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:variable name=${mpx.quote}attr_value${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}value${mpx.quote}/>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:attribute name=${mpx.quote}{$attr_name}${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}$attr_value${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							</xsl:for-each>${mpx.lf}							<xsl:value-of select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}						</button>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}submitbutton_input${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}renderCmd${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}align${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}customFunction${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='title' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:value-of select=${mpx.quote}current()/@title${mpx.quote}/>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='all'${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$align='horizontal'${mpx.quote}>${mpx.lf}								<xsl:text>    </xsl:text>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<br/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:if>${mpx.lf}					<xsl:if test=${mpx.quote}$renderCmd='input' or $renderCmd='all'${mpx.quote}>${mpx.lf}						<input name=${mpx.quote}{$fieldName}${mpx.quote} type=${mpx.quote}submit${mpx.quote}>${mpx.lf}							<xsl:variable name=${mpx.quote}value${mpx.quote} select=${mpx.quote}value${mpx.quote}/>${mpx.lf}							<xsl:if test=${mpx.quote}$value${mpx.quote}>${mpx.lf}								<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:for-each select=${mpx.quote}current()/display/meta${mpx.quote}>${mpx.lf}								<xsl:variable name=${mpx.quote}attr_name${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}name${mpx.quote}/>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:variable name=${mpx.quote}attr_value${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}value${mpx.quote}/>${mpx.lf}								</xsl:variable>${mpx.lf}								<xsl:attribute name=${mpx.quote}{$attr_name}${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}$attr_value${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}							</xsl:for-each>${mpx.lf}						</input>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}hidden_input${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}finalValue${mpx.quote}>${mpx.lf}					  <xsl:choose>${mpx.lf}					    <xsl:when test=${mpx.quote}$value${mpx.quote}>${mpx.lf}					      <xsl:value-of select=${mpx.quote}$value${mpx.quote}/>${mpx.lf}					    </xsl:when>${mpx.lf}					    <xsl:otherwise>${mpx.lf}						  <xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=string($fieldName)]/value${mpx.quote}/>${mpx.lf}						</xsl:otherwise>${mpx.lf}					  </xsl:choose>${mpx.lf}					</xsl:variable>${mpx.lf}					<input name=${mpx.quote}{$fieldName}${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$finalValue}${mpx.quote}/>${mpx.lf}					<!-- <xsl:comment>${mpx.lf}					XPath: //edlContent/data/version[@current='true']/field[@name={$fieldName}]/value${mpx.lf}					Escaped: <xsl:value-of select=${mpx.quote}my-class:escapeForXPath($fieldName)${mpx.quote}/>${mpx.lf}					What's my value? <xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=$fieldName]/value${mpx.quote}/>${mpx.lf}					What's my value2? <xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/field[@name=my-class:escapeForXPath($fieldName)]/value${mpx.quote}/>${mpx.lf}					</xsl:comment> -->${mpx.lf}${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}page_button${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}pageName${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}value${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}clickfunction${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}use_jsButton${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}clickFunctionVal${mpx.quote} select=${mpx.quote}boolean(normalize-space($clickfunction))${mpx.quote}/>${mpx.lf}					<xsl:choose>${mpx.lf}						<xsl:when test=${mpx.quote}$readOnly='true'${mpx.quote}>${mpx.lf}						  <input disabled=${mpx.quote}disabled${mpx.quote} name=${mpx.quote}edl.gotoPage:{$pageName}${mpx.quote} type=${mpx.quote}submit${mpx.quote} value=${mpx.quote}{$value}${mpx.quote}/>${mpx.lf}						</xsl:when>${mpx.lf}						<xsl:when test=${mpx.quote}$clickFunctionVal${mpx.quote}>${mpx.lf}						  <xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$use_jsButton = 'true'${mpx.quote}>${mpx.lf}								<input name=${mpx.quote}jsButton${mpx.quote} onClick=${mpx.quote}{$clickfunction}${mpx.quote} type=${mpx.quote}submit${mpx.quote} value=${mpx.quote}{$value}${mpx.quote}/>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<input name=${mpx.quote}edl.gotoPage:{$pageName}${mpx.quote} onClick=${mpx.quote}{$clickfunction}${mpx.quote} type=${mpx.quote}submit${mpx.quote} value=${mpx.quote}{$value}${mpx.quote}/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						  </xsl:choose>${mpx.lf}						</xsl:when>${mpx.lf}						<xsl:otherwise>${mpx.lf}						  <input name=${mpx.quote}edl.gotoPage:{$pageName}${mpx.quote} type=${mpx.quote}submit${mpx.quote} value=${mpx.quote}{$value}${mpx.quote}/>${mpx.lf}						</xsl:otherwise>${mpx.lf}					</xsl:choose>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}header${mpx.quote}>${mpx.lf}					<table border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}0${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} class=${mpx.quote}headertable${mpx.quote} width=${mpx.quote}100%${mpx.quote}>${mpx.lf}						<tr>${mpx.lf}							<td align=${mpx.quote}left${mpx.quote} valign=${mpx.quote}top${mpx.quote} width=${mpx.quote}10%${mpx.quote}>${mpx.lf}								<img alt=${mpx.quote}OneStart Workflow${mpx.quote} height=${mpx.quote}21${mpx.quote} hspace=${mpx.quote}5${mpx.quote} src=${mpx.quote}images/wf-logo.gif${mpx.quote} vspace=${mpx.quote}5${mpx.quote} width=${mpx.quote}150${mpx.quote}/>${mpx.lf}							</td>${mpx.lf}							<td align=${mpx.quote}right${mpx.quote}>${mpx.lf}								<table border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}0${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote}>${mpx.lf}									<tr>${mpx.lf}										<td align=${mpx.quote}right${mpx.quote} class=${mpx.quote}thnormal${mpx.quote}>Document Type Name:</td>${mpx.lf}										<td align=${mpx.quote}left${mpx.quote} class=${mpx.quote}datacell1${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}/documentContent/documentState/docType${mpx.quote}/>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}									<tr>${mpx.lf}										<td align=${mpx.quote}right${mpx.quote} class=${mpx.quote}thnormal${mpx.quote}>Document Status:</td>${mpx.lf}										<td align=${mpx.quote}left${mpx.quote} class=${mpx.quote}datacell1${mpx.quote} width=${mpx.quote}50${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}//documentState/workflowDocumentState/status${mpx.quote}/>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}									<tr>${mpx.lf}										<td align=${mpx.quote}right${mpx.quote} class=${mpx.quote}thnormal${mpx.quote}>Create Date:</td>${mpx.lf}										<td align=${mpx.quote}left${mpx.quote} class=${mpx.quote}datacell1${mpx.quote}>${mpx.lf}											<xsl:comment>[transient start]</xsl:comment>${mpx.lf}											<xsl:value-of select=${mpx.quote}//documentState/workflowDocumentState/createDate${mpx.quote}/>${mpx.lf}											<xsl:comment>[transient end]</xsl:comment>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}									<tr>${mpx.lf}										<td align=${mpx.quote}right${mpx.quote} class=${mpx.quote}thnormal${mpx.quote}>Document ID:</td>${mpx.lf}										<td align=${mpx.quote}left${mpx.quote} class=${mpx.quote}datacell1${mpx.quote}>${mpx.lf}												<xsl:comment>[transient start]</xsl:comment>${mpx.lf}												<xsl:value-of select=${mpx.quote}/documentContent/documentState/docId${mpx.quote}/>${mpx.lf}												<xsl:comment>[transient end]</xsl:comment>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}								</table>${mpx.lf}							</td>${mpx.lf}						</tr>${mpx.lf}					</table>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}htmlHead${mpx.quote}>${mpx.lf}					<!-- whether the FIELDS can be edited -->${mpx.lf}					<!-- <xsl:variable name=${mpx.quote}globalReadOnly${mpx.quote} select=${mpx.quote}/documentContent/documentState/editable != 'true'${mpx.quote}/>-->${mpx.lf}					<!-- whether the form can be acted upon -->${mpx.lf}					<xsl:variable name=${mpx.quote}actionable${mpx.quote} select=${mpx.quote}/documentContent/documentState/actionable = 'true'${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}docId${mpx.quote} select=${mpx.quote}/documentContent/documentState/docId${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}def${mpx.quote} select=${mpx.quote}/documentContent/documentState/definition${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}docType${mpx.quote} select=${mpx.quote}/documentContent/documentState/docType${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}style${mpx.quote} select=${mpx.quote}/documentContent/documentState/style${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}annotatable${mpx.quote} select=${mpx.quote}/documentContent/documentState/annotatable = 'true'${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}docTitle${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}//edlContent/edl/@title${mpx.quote}>${mpx.lf}								<xsl:value-of select=${mpx.quote}//edlContent/edl/@title${mpx.quote}/>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<xsl:value-of select=${mpx.quote}//edlContent/edl/@name${mpx.quote}/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:variable>${mpx.lf}					<xsl:variable name=${mpx.quote}pageTitle${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}								Viewing${mpx.lf}              </xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								Editing${mpx.lf}              </xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}${mpx.lf}${mpx.lf}          </xsl:variable>${mpx.lf}					<title>${mpx.lf}						<xsl:value-of select=${mpx.quote}$pageTitle${mpx.quote}/> Document${mpx.lf}					</title>${mpx.lf}					<xsl:comment>* Meta data block for automation/testing</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var editable_value=<xsl:value-of select=${mpx.quote}//documentState/editable${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var annotatable_value=<xsl:value-of select=${mpx.quote}//documentState/annotatable${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var globalReadOnly=<xsl:value-of select=${mpx.quote}$globalReadOnly${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var annotatable=<xsl:value-of select=${mpx.quote}$annotatable${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var annotation=<xsl:value-of select=${mpx.quote}//edlContent/data/version[@current='true']/annotation${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [transient start]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var docid=<xsl:value-of select=${mpx.quote}$docId${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [transient end]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var doctype=<xsl:value-of select=${mpx.quote}$docType${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var def=<xsl:value-of select=${mpx.quote}$def${mpx.quote}/>]</xsl:comment>${mpx.lf}					<xsl:comment>* 	 [var style=<xsl:value-of select=${mpx.quote}$style${mpx.quote}/>]</xsl:comment>${mpx.lf}					<link href=${mpx.quote}css/screen.css${mpx.quote} rel=${mpx.quote}stylesheet${mpx.quote} type=${mpx.quote}text/css${mpx.quote}/>${mpx.lf}					<link href=${mpx.quote}css/edoclite1.css${mpx.quote} rel=${mpx.quote}stylesheet${mpx.quote} type=${mpx.quote}text/css${mpx.quote}/>${mpx.lf}					<script src=${mpx.quote}scripts/edoclite1.js${mpx.quote} type=${mpx.quote}text/javascript${mpx.quote}/>${mpx.lf}					<script src=${mpx.quote}scripts/prototype.js${mpx.quote} type=${mpx.quote}text/javascript${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}//edlContent/edl/javascript${mpx.quote}>${mpx.lf}						<script type=${mpx.quote}text/javascript${mpx.quote}>${mpx.lf}							<xsl:value-of select=${mpx.quote}//edlContent/edl/javascript${mpx.quote}/>${mpx.lf}						</script>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}instructions${mpx.quote}>${mpx.lf}					<!-- <xsl:variable name=${mpx.quote}globalReadOnly${mpx.quote} select=${mpx.quote}/documentContent/documentState/editable != 'true'${mpx.quote}/> -->${mpx.lf}					<xsl:variable name=${mpx.quote}docType${mpx.quote} select=${mpx.quote}/documentContent/documentState/docType${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}docTitle${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}//edlContent/edl/@title${mpx.quote}>${mpx.lf}								<xsl:value-of select=${mpx.quote}//edlContent/edl/@title${mpx.quote}/>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<xsl:value-of select=${mpx.quote}//edlContent/edl/@name${mpx.quote}/>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:variable>${mpx.lf}					<xsl:variable name=${mpx.quote}instructions${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}//edlContent/edl/instructions${mpx.quote}>${mpx.lf}								<xsl:value-of select=${mpx.quote}//edlContent/edl/instructions${mpx.quote}/>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}${mpx.lf}								Reviewing Document${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:variable>${mpx.lf}					<xsl:variable name=${mpx.quote}createInstructions${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}//edlContent/edl/createInstructions${mpx.quote}>${mpx.lf}								<xsl:value-of select=${mpx.quote}//edlContent/edl/createInstructions${mpx.quote}/>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}${mpx.lf}								Filling out new Document${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}					</xsl:variable>${mpx.lf}					<xsl:variable name=${mpx.quote}pageTitle${mpx.quote}>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}								Viewing${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								Editing${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}${mpx.lf}${mpx.lf}						Document${mpx.lf}					</xsl:variable>${mpx.lf}					<table align=${mpx.quote}center${mpx.quote} border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}10${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} width=${mpx.quote}80%${mpx.quote}>${mpx.lf}						<tr>${mpx.lf}							<td>${mpx.lf}								<strong>${mpx.lf}									<xsl:value-of select=${mpx.quote}$pageTitle${mpx.quote}/>${mpx.lf}								</strong>${mpx.lf}							</td>${mpx.lf}						</tr>${mpx.lf}						<tr>${mpx.lf}							<td>${mpx.lf}								<!-- if 'save' action is present then this is a ${mpx.quote}new${mpx.quote} document that has not been routed, and therefore we should display the create instructions -->${mpx.lf}								<xsl:choose>${mpx.lf}									<xsl:when test=${mpx.quote}//documentState/actionsPossible/save${mpx.quote}>${mpx.lf}										<xsl:value-of select=${mpx.quote}$createInstructions${mpx.quote}/>${mpx.lf}									</xsl:when>${mpx.lf}									<xsl:otherwise>${mpx.lf}										<xsl:value-of select=${mpx.quote}$instructions${mpx.quote}/>${mpx.lf}									</xsl:otherwise>${mpx.lf}								</xsl:choose>${mpx.lf}							</td>${mpx.lf}						</tr>${mpx.lf}					</table>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}errors${mpx.quote}>${mpx.lf}					<!--${mpx.lf}						<style type=${mpx.quote}text/css${mpx.quote}>${mpx.lf}							.error-message {${mpx.lf}    						color: red;${mpx.lf}    						text-align: center;${mpx.lf}							}${mpx.lf}						</style>${mpx.lf}					-->${mpx.lf}					<table align=${mpx.quote}center${mpx.quote} border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}10${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} width=${mpx.quote}80%${mpx.quote}>${mpx.lf}						<xsl:for-each select=${mpx.quote}//documentState/error${mpx.quote}>${mpx.lf}							<tr>${mpx.lf}								<td>${mpx.lf}									<div class=${mpx.quote}error-message${mpx.quote}>${mpx.lf}										<xsl:value-of select=${mpx.quote}.${mpx.quote}/>${mpx.lf}									</div>${mpx.lf}								</td>${mpx.lf}							</tr>${mpx.lf}						</xsl:for-each>${mpx.lf}					</table>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}footer${mpx.quote}>${mpx.lf}					<xsl:if test=${mpx.quote}//documentState/userSession/backdoorUser${mpx.quote}>${mpx.lf}						<center>${mpx.lf}							User${mpx.lf}							<xsl:choose>${mpx.lf}								<xsl:when test=${mpx.quote}//documentState/userSession/loggedInUser/displayName${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}//documentState/userSession/loggedInUser/displayName${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:when test=${mpx.quote}//documentState/userSession/loggedInUser/networkId${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}//documentState/userSession/loggedInUser/networkId${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:otherwise>${mpx.lf}									??Unknown user??${mpx.lf}								</xsl:otherwise>${mpx.lf}							</xsl:choose>${mpx.lf}							standing in for user${mpx.lf}							<xsl:choose>${mpx.lf}								<xsl:when test=${mpx.quote}//documentState/userSession/backdoorUser/backdoorDisplayName${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}//documentState/userSession/backdoorUser/backdoorDisplayName${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:when test=${mpx.quote}//documentState/userSession/backdoorUser/backdoorNetworkId${mpx.quote}>${mpx.lf}									<xsl:value-of select=${mpx.quote}//documentState/userSession/backdoorUser/backdoorNetworkId${mpx.quote}/>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:otherwise>${mpx.lf}									??Unknown user??${mpx.lf}								</xsl:otherwise>${mpx.lf}							</xsl:choose>${mpx.lf}						</center>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}hidden-params${mpx.quote}>${mpx.lf}					<xsl:comment>* Hide this nastiness so we can concentrate on formating above</xsl:comment>${mpx.lf}					<xsl:variable name=${mpx.quote}docId${mpx.quote} select=${mpx.quote}/documentContent/documentState/docId${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}def${mpx.quote} select=${mpx.quote}/documentContent/documentState/definition${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}docType${mpx.quote} select=${mpx.quote}/documentContent/documentState/docType${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}style${mpx.quote} select=${mpx.quote}/documentContent/documentState/style${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}incrementVersion${mpx.quote} select=${mpx.quote}//edlContent/data/version[@current='true']/incrementVersion${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}currentPage${mpx.quote} select=${mpx.quote}//currentPage${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}previousPage${mpx.quote} select=${mpx.quote}//previousPage${mpx.quote}/>${mpx.lf}					<div style=${mpx.quote}display: none${mpx.quote}>${mpx.lf}						<xsl:if test=${mpx.quote}$incrementVersion = 'true'${mpx.quote}>${mpx.lf}							<input name=${mpx.quote}incrementVersion${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$incrementVersion}${mpx.quote}/>${mpx.lf}						</xsl:if>${mpx.lf}						<xsl:choose>${mpx.lf}							<xsl:when test=${mpx.quote}$docId${mpx.quote}>${mpx.lf}								<!-- preserve the data for comparison without transient value -->${mpx.lf}								<xsl:comment>* input name=${mpx.quote}docId${mpx.quote} type=${mpx.quote}hidden${mpx.quote}</xsl:comment>${mpx.lf}								<!-- mark the entire input element transient because we can't insert comments in the middle of a tag just to omit a certain attribute -->${mpx.lf}								<xsl:comment>[transient start]</xsl:comment>${mpx.lf}								<input name=${mpx.quote}docId${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$docId}${mpx.quote}/>${mpx.lf}								<xsl:comment>[transient end]</xsl:comment>${mpx.lf}							</xsl:when>${mpx.lf}							<xsl:otherwise>${mpx.lf}								<xsl:if test=${mpx.quote}$docType${mpx.quote}>${mpx.lf}									<input name=${mpx.quote}docType${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$docType}${mpx.quote}/>${mpx.lf}								</xsl:if>${mpx.lf}								<xsl:if test=${mpx.quote}$def${mpx.quote}>${mpx.lf}									<input name=${mpx.quote}def${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$def}${mpx.quote}/>${mpx.lf}								</xsl:if>${mpx.lf}								<xsl:if test=${mpx.quote}$style${mpx.quote}>${mpx.lf}									<input name=${mpx.quote}style${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$style}${mpx.quote}/>${mpx.lf}								</xsl:if>${mpx.lf}							</xsl:otherwise>${mpx.lf}						</xsl:choose>${mpx.lf}						<xsl:if test=${mpx.quote}$currentPage${mpx.quote}>${mpx.lf}						  <input name=${mpx.quote}edl.currentPage${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$currentPage}${mpx.quote}/>${mpx.lf}						</xsl:if>${mpx.lf}						<xsl:if test=${mpx.quote}$previousPage${mpx.quote}>${mpx.lf}						  <input name=${mpx.quote}edl.previousPage${mpx.quote} type=${mpx.quote}hidden${mpx.quote} value=${mpx.quote}{$previousPage}${mpx.quote}/>${mpx.lf}						</xsl:if>${mpx.lf}					</div>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}annotation${mpx.quote}>${mpx.lf}					<xsl:variable name=${mpx.quote}annotation${mpx.quote} select=${mpx.quote}//edlContent/data/version[@current='true']/annotation${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}currentAnnotation${mpx.quote} select=${mpx.quote}//edlContent/data/version[@current='true']/currentAnnotation${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}annotatable${mpx.quote} select=${mpx.quote}/documentContent/documentState/annotatable = 'true'${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}$annotatable or $annotation or $currentAnnotation${mpx.quote}>${mpx.lf}						<table align=${mpx.quote}center${mpx.quote} border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}0${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} class=${mpx.quote}bord-r-t${mpx.quote} width=${mpx.quote}80%${mpx.quote}>${mpx.lf}							<tr>${mpx.lf}								<td align=${mpx.quote}center${mpx.quote} class=${mpx.quote}thnormal${mpx.quote} colspan=${mpx.quote}2${mpx.quote}>${mpx.lf}									<xsl:if test=${mpx.quote}$annotation${mpx.quote}>${mpx.lf}										<div>${mpx.lf}<h4>Annotations</h4>${mpx.lf}											<xsl:for-each select=${mpx.quote}//edlContent/data/version[@current='true']/annotation${mpx.quote}>${mpx.lf}												<div>${mpx.lf}<xsl:value-of select=${mpx.quote}.${mpx.quote}/>${mpx.lf}</div>${mpx.lf}											</xsl:for-each>${mpx.lf}										</div>${mpx.lf}										<br/>${mpx.lf}									</xsl:if>${mpx.lf}									<xsl:if test=${mpx.quote}$annotatable${mpx.quote}>${mpx.lf}										Set annotation:<br/>${mpx.lf}										<textarea name=${mpx.quote}annotation${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}$currentAnnotation${mpx.quote}/>${mpx.lf}										</textarea>${mpx.lf}									</xsl:if>${mpx.lf}								</td>${mpx.lf}							</tr>${mpx.lf}						</table>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}buttons${mpx.quote}>${mpx.lf}					<xsl:param name=${mpx.quote}fname${mpx.quote}/>${mpx.lf}					<xsl:param name=${mpx.quote}showRTP${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}functionName${mpx.quote} select=${mpx.quote}$fname${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}fxname${mpx.quote} select=${mpx.quote}boolean(normalize-space($fname))${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}actionable${mpx.quote} select=${mpx.quote}/documentContent/documentState/actionable = 'true'${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}apos${mpx.quote} select=${mpx.quote}&quot;'&quot;${mpx.quote}/>${mpx.lf}					<xsl:variable name=${mpx.quote}showRTPbutton${mpx.quote} select=${mpx.quote}$showRTP${mpx.quote}/>${mpx.lf}					<xsl:if test=${mpx.quote}//documentState/actionsPossible/*${mpx.quote}>${mpx.lf}						<table align=${mpx.quote}center${mpx.quote} border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}0${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} class=${mpx.quote}bord-r-t${mpx.quote} width=${mpx.quote}80%${mpx.quote}>${mpx.lf}							<tr>${mpx.lf}								<td align=${mpx.quote}center${mpx.quote} class=${mpx.quote}thnormal${mpx.quote} colspan=${mpx.quote}2${mpx.quote}>${mpx.lf}									<xsl:text>									</xsl:text>${mpx.lf}										<xsl:for-each select=${mpx.quote}//documentState/actionsPossible/*[. != 'returnToPrevious']${mpx.quote}>${mpx.lf}											<xsl:variable name=${mpx.quote}actionTitle${mpx.quote}>${mpx.lf}												<xsl:choose>${mpx.lf}													<xsl:when test=${mpx.quote}@title${mpx.quote}>${mpx.lf}														<xsl:value-of select=${mpx.quote}@title${mpx.quote}/>${mpx.lf}													</xsl:when>${mpx.lf}													<xsl:otherwise>${mpx.lf}														<xsl:value-of select=${mpx.quote}local-name()${mpx.quote}/>${mpx.lf}													</xsl:otherwise>${mpx.lf}												</xsl:choose>${mpx.lf}											</xsl:variable>${mpx.lf}										<xsl:if test=${mpx.quote}local-name() != 'returnToPrevious' or local-name() = 'returnToPrevious' and not($showRTPbutton = 'false')${mpx.quote}>${mpx.lf}											<input name=${mpx.quote}userAction${mpx.quote} title=${mpx.quote}{$actionTitle}${mpx.quote} type=${mpx.quote}submit${mpx.quote}>${mpx.lf}												<xsl:if test=${mpx.quote}not($actionable)${mpx.quote}>${mpx.lf}													<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}												</xsl:if>${mpx.lf}											 <xsl:choose>${mpx.lf}												<xsl:when test=${mpx.quote}$fxname${mpx.quote}>${mpx.lf}												  <xsl:attribute name=${mpx.quote}onclick${mpx.quote}>${mpx.lf}													  <xsl:value-of select=${mpx.quote}'buttonClick('${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$apos${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$actionTitle${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$apos${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}'); '${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}'buttonClickFunctionName('${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$functionName${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}')'${mpx.quote}/>${mpx.lf}													</xsl:attribute>${mpx.lf}												</xsl:when>${mpx.lf}												<xsl:otherwise>${mpx.lf}													<xsl:attribute name=${mpx.quote}onclick${mpx.quote}>${mpx.lf}													  <xsl:value-of select=${mpx.quote}'buttonClick('${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$apos${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$actionTitle${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}$apos${mpx.quote}/>${mpx.lf}													  <xsl:value-of select=${mpx.quote}')'${mpx.quote}/>${mpx.lf}													</xsl:attribute>${mpx.lf}												</xsl:otherwise>${mpx.lf}											  </xsl:choose>${mpx.lf}											  <xsl:choose>${mpx.lf}											    <xsl:when test=${mpx.quote}local-name() = 'route'${mpx.quote}>${mpx.lf}											      <xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}											        <xsl:value-of select=${mpx.quote}'submit'${mpx.quote}/>${mpx.lf}											      </xsl:attribute>${mpx.lf}											    </xsl:when>${mpx.lf}											    <xsl:when test=${mpx.quote}local-name() = 'blanketApprove'${mpx.quote}>${mpx.lf}											      <xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}											        <xsl:value-of select=${mpx.quote}'blanket approve'${mpx.quote}/>${mpx.lf}											      </xsl:attribute>${mpx.lf}											    </xsl:when>${mpx.lf}											    <xsl:when test=${mpx.quote}local-name() = 'returnToPrevious'${mpx.quote}>${mpx.lf}											      <xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}											        <xsl:value-of select=${mpx.quote}'return to previous'${mpx.quote}/>${mpx.lf}											      </xsl:attribute>${mpx.lf}											    </xsl:when>${mpx.lf}											    <xsl:otherwise>${mpx.lf}											      <xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}											        <xsl:value-of select=${mpx.quote}local-name()${mpx.quote}/>${mpx.lf}											      </xsl:attribute>${mpx.lf}											    </xsl:otherwise>${mpx.lf}											  </xsl:choose>${mpx.lf}											</input>${mpx.lf}										</xsl:if>${mpx.lf}											<xsl:text>                 					 </xsl:text>${mpx.lf}										</xsl:for-each>${mpx.lf}${mpx.lf}								<xsl:if test=${mpx.quote}not($showRTPbutton = 'false')${mpx.quote}>${mpx.lf}									<xsl:if test=${mpx.quote}//documentState/actionsPossible/returnToPrevious${mpx.quote}>${mpx.lf}										<select name=${mpx.quote}previousNode${mpx.quote}>${mpx.lf}											<xsl:if test=${mpx.quote}not($actionable) or $showRTPbutton = 'false'${mpx.quote}>${mpx.lf}												<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}											</xsl:if>${mpx.lf}											<xsl:for-each select=${mpx.quote}//documentState/previousNodes/node${mpx.quote}>${mpx.lf}												<option value=${mpx.quote}{.}${mpx.quote}>${mpx.lf}													<xsl:value-of select=${mpx.quote}.${mpx.quote}/>${mpx.lf}												</option>${mpx.lf}											</xsl:for-each>${mpx.lf}										</select>${mpx.lf}										<xsl:text>                 					 </xsl:text>${mpx.lf}									</xsl:if>${mpx.lf}								</xsl:if>${mpx.lf}								</td>${mpx.lf}							</tr>${mpx.lf}						</table>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template match=${mpx.quote}/${mpx.quote}>${mpx.lf}					<xsl:choose>${mpx.lf}						<xsl:when test=${mpx.quote}$overrideMain='true'${mpx.quote}>${mpx.lf}							<xsl:call-template name=${mpx.quote}mainForm${mpx.quote}/>${mpx.lf}						</xsl:when>${mpx.lf}						<xsl:otherwise>${mpx.lf}							<html>${mpx.lf}								<head>${mpx.lf}									<xsl:call-template name=${mpx.quote}htmlHead${mpx.quote}/>${mpx.lf}								</head>${mpx.lf}								<body onload=${mpx.quote}onPageLoad()${mpx.quote}>${mpx.lf}									<xsl:call-template name=${mpx.quote}header${mpx.quote}/>${mpx.lf}									<xsl:call-template name=${mpx.quote}instructions${mpx.quote}/>${mpx.lf}									<xsl:call-template name=${mpx.quote}errors${mpx.quote}/>${mpx.lf}									<xsl:variable name=${mpx.quote}formTarget${mpx.quote} select=${mpx.quote}'EDocLite'${mpx.quote}/>${mpx.lf}									<form accept-charset=${mpx.quote}ISO-8859-1${mpx.quote} action=${mpx.quote}{$formTarget}${mpx.quote} enctype=${mpx.quote}multipart/form-data${mpx.quote} id=${mpx.quote}edoclite${mpx.quote} method=${mpx.quote}post${mpx.quote} onsubmit=${mpx.quote}return validateOnSubmit(this)${mpx.quote}>${mpx.lf}										<xsl:call-template name=${mpx.quote}hidden-params${mpx.quote}/>${mpx.lf}										<xsl:call-template name=${mpx.quote}mainBody${mpx.quote}/>${mpx.lf}										<xsl:call-template name=${mpx.quote}annotation${mpx.quote}/>${mpx.lf}										<xsl:call-template name=${mpx.quote}buttons${mpx.quote}/>${mpx.lf}										<br/>${mpx.lf}										<xsl:call-template name=${mpx.quote}notes${mpx.quote}/>${mpx.lf}									</form>${mpx.lf}									<xsl:call-template name=${mpx.quote}footer${mpx.quote}/>${mpx.lf}								</body>${mpx.lf}							</html>${mpx.lf}						</xsl:otherwise>${mpx.lf}					</xsl:choose>${mpx.lf}				</xsl:template>${mpx.lf}${mpx.lf}				<xsl:template name=${mpx.quote}notes${mpx.quote}>${mpx.lf}					<xsl:if test=${mpx.quote}//NoteForm${mpx.quote}>${mpx.lf}						<xsl:variable name=${mpx.quote}showEdit${mpx.quote} select=${mpx.quote}//NoteForm/showEdit${mpx.quote}/>${mpx.lf}						<xsl:variable name=${mpx.quote}showAdd${mpx.quote} select=${mpx.quote}//NoteForm/showAdd${mpx.quote}/>${mpx.lf}						<input name=${mpx.quote}showEdit${mpx.quote} type=${mpx.quote}hidden${mpx.quote}>${mpx.lf}							<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}//NoteForm/showEdit${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}						</input>${mpx.lf}						<input name=${mpx.quote}showAdd${mpx.quote} type=${mpx.quote}hidden${mpx.quote}>${mpx.lf}							<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}//NoteForm/showAdd${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}						</input>${mpx.lf}						<input name=${mpx.quote}methodToCall${mpx.quote} type=${mpx.quote}hidden${mpx.quote}/>${mpx.lf}						<input name=${mpx.quote}sortNotes${mpx.quote} type=${mpx.quote}hidden${mpx.quote}>${mpx.lf}							<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}//NoteForm/sortNotes${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}						</input>${mpx.lf}						<input name=${mpx.quote}noteIdNumber${mpx.quote} type=${mpx.quote}hidden${mpx.quote}>${mpx.lf}							<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}//NoteForm/noteIdNumber${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}						</input>${mpx.lf}						<table align=${mpx.quote}center${mpx.quote} border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}0${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} class=${mpx.quote}bord-r-t${mpx.quote} width=${mpx.quote}80%${mpx.quote}>${mpx.lf}							<xsl:if test=${mpx.quote}$showAdd = 'true'${mpx.quote}>${mpx.lf}								<tr>${mpx.lf}									<td align=${mpx.quote}center${mpx.quote} class=${mpx.quote}thnormal2${mpx.quote} colspan=${mpx.quote}4${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}										<b>Create Note </b>${mpx.lf}									</td>${mpx.lf}								</tr>${mpx.lf}								<tr>${mpx.lf}									<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}										<div align=${mpx.quote}center${mpx.quote}>Author</div>${mpx.lf}									</td>${mpx.lf}									<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}										<div align=${mpx.quote}center${mpx.quote}>Date</div>${mpx.lf}									</td>${mpx.lf}									<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}										<div align=${mpx.quote}center${mpx.quote}>Note</div>${mpx.lf}									</td>${mpx.lf}									<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}										<div align=${mpx.quote}center${mpx.quote}>Action</div>${mpx.lf}									</td>${mpx.lf}								</tr>${mpx.lf}								<tr valign=${mpx.quote}top${mpx.quote}>${mpx.lf}									<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}										<xsl:if test=${mpx.quote}$globalReadOnly != 'true'${mpx.quote}>${mpx.lf}											<xsl:value-of select=${mpx.quote}//NoteForm/currentUserName${mpx.quote}/>${mpx.lf}										</xsl:if>${mpx.lf}									</td>${mpx.lf}									<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}										<xsl:if test=${mpx.quote}$globalReadOnly != 'true'${mpx.quote}>${mpx.lf}											<xsl:comment>[transient start]</xsl:comment>${mpx.lf}											<xsl:value-of select=${mpx.quote}//NoteForm/currentDate${mpx.quote}/>${mpx.lf}            				  <xsl:comment>[transient end]</xsl:comment>${mpx.lf}										</xsl:if>${mpx.lf}									</td>${mpx.lf}									<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}										<xsl:choose>${mpx.lf}											<xsl:when test=${mpx.quote}$showEdit = 'yes'${mpx.quote}>${mpx.lf}												<textarea cols=${mpx.quote}60${mpx.quote} disabled=${mpx.quote}true${mpx.quote} name=${mpx.quote}addText${mpx.quote} rows=${mpx.quote}3${mpx.quote}/>${mpx.lf}												<xsl:if test=${mpx.quote}$showAttachments = 'true'${mpx.quote}>${mpx.lf}													<br/>Attachment:	<input disabled=${mpx.quote}true${mpx.quote} name=${mpx.quote}file${mpx.quote} type=${mpx.quote}file${mpx.quote}/>${mpx.lf}												</xsl:if>${mpx.lf}											</xsl:when>${mpx.lf}											<xsl:otherwise>${mpx.lf}												<textarea cols=${mpx.quote}60${mpx.quote} name=${mpx.quote}addText${mpx.quote} rows=${mpx.quote}3${mpx.quote}>${mpx.lf}													<xsl:if test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}														<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}													</xsl:if>${mpx.lf}												</textarea>${mpx.lf}												<xsl:if test=${mpx.quote}$showAttachments = 'true'${mpx.quote}>${mpx.lf}													<br/>${mpx.lf}													Attachment:${mpx.lf}													<input name=${mpx.quote}file${mpx.quote} type=${mpx.quote}file${mpx.quote}>${mpx.lf}														<xsl:if test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}															<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}														</xsl:if>${mpx.lf}													</input>${mpx.lf}												</xsl:if>${mpx.lf}											</xsl:otherwise>${mpx.lf}										</xsl:choose>${mpx.lf}									</td>${mpx.lf}									<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}										<xsl:choose>${mpx.lf}											<xsl:when test=${mpx.quote}$showEdit = 'yes'${mpx.quote}>${mpx.lf}												<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}													<img height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} src=${mpx.quote}images/tinybutton-save-disable.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}45${mpx.quote}/>${mpx.lf}												</div>${mpx.lf}											</xsl:when>${mpx.lf}											<xsl:otherwise>${mpx.lf}												<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}													<xsl:choose>${mpx.lf}														<xsl:when test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}															<img height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} src=${mpx.quote}images/tinybutton-save-disable.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}45${mpx.quote}/>${mpx.lf}														</xsl:when>${mpx.lf}														<xsl:otherwise>${mpx.lf}															<img border=${mpx.quote}0${mpx.quote} height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} onclick=${mpx.quote}document.forms[0].methodToCall.value='save'; document.forms[0].submit();${mpx.quote} src=${mpx.quote}images/tinybutton-save.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}45${mpx.quote}/>${mpx.lf}														</xsl:otherwise>${mpx.lf}													</xsl:choose>${mpx.lf}												</div>${mpx.lf}											</xsl:otherwise>${mpx.lf}										</xsl:choose>${mpx.lf}									</td>${mpx.lf}								</tr>${mpx.lf}							</xsl:if>${mpx.lf}							<xsl:choose>${mpx.lf}								<xsl:when test=${mpx.quote}//NoteForm/numberOfNotes &gt;0${mpx.quote}>${mpx.lf}									<tr>${mpx.lf}										<td align=${mpx.quote}center${mpx.quote} class=${mpx.quote}thnormal2${mpx.quote} colspan=${mpx.quote}4${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}											<b>View Notes </b>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}									<tr>${mpx.lf}										<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}											<div align=${mpx.quote}center${mpx.quote}>Author</div>${mpx.lf}										</td>${mpx.lf}										<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}											<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}												 <xsl:choose>${mpx.lf}													<xsl:when test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}														Date${mpx.lf}													</xsl:when>${mpx.lf}													<xsl:otherwise>${mpx.lf}														<a href=${mpx.quote}javascript: document.forms[0].elements['methodToCall'].value = 'sort'; document.forms[0].elements['sortNotes'].value = 'true'; document.forms[0].submit();${mpx.quote}>Date</a>${mpx.lf}														<img height=${mpx.quote}5${mpx.quote} src=${mpx.quote}images/arrow-expcol-down.gif${mpx.quote} width=${mpx.quote}9${mpx.quote}/>${mpx.lf}													</xsl:otherwise>${mpx.lf}												</xsl:choose>${mpx.lf}											</div>${mpx.lf}										</td>${mpx.lf}										<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}											<div align=${mpx.quote}center${mpx.quote}>Note</div>${mpx.lf}										</td>${mpx.lf}										<td class=${mpx.quote}thnormal${mpx.quote} scope=${mpx.quote}col${mpx.quote}>${mpx.lf}											<div align=${mpx.quote}center${mpx.quote}>Action</div>${mpx.lf}										</td>${mpx.lf}									</tr>${mpx.lf}									<xsl:for-each select=${mpx.quote}//NoteForm/Notes/Note${mpx.quote}>${mpx.lf}										<tr valign=${mpx.quote}top${mpx.quote}>${mpx.lf}											<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}												<xsl:value-of select=${mpx.quote}noteAuthorFullName${mpx.quote}/>${mpx.lf}											</td>${mpx.lf}											<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}            			      <xsl:comment>[transient start]</xsl:comment>${mpx.lf}												<xsl:value-of select=${mpx.quote}formattedCreateDate${mpx.quote}/>${mpx.lf}              			    <xsl:comment>[transient end]</xsl:comment>${mpx.lf}												<br/>${mpx.lf}                			  <xsl:comment>[transient start]</xsl:comment>${mpx.lf}												<xsl:value-of select=${mpx.quote}formattedCreateTime${mpx.quote}/>${mpx.lf}												<xsl:comment>[transient end]</xsl:comment>${mpx.lf}											</td>${mpx.lf}											<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}												 <xsl:choose>${mpx.lf}													<xsl:when test=${mpx.quote}editingNote = 'true' and authorizedToEdit = 'true'${mpx.quote}>${mpx.lf}														<textarea cols=${mpx.quote}60${mpx.quote} name=${mpx.quote}noteText${mpx.quote} rows=${mpx.quote}3${mpx.quote}>${mpx.lf}															<xsl:if test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}																<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}															</xsl:if>${mpx.lf}															<xsl:value-of select=${mpx.quote}noteText${mpx.quote}/>${mpx.lf}														</textarea>${mpx.lf}														<br/>${mpx.lf}														<xsl:if test=${mpx.quote}$showAttachments = 'true'${mpx.quote}>${mpx.lf}															<xsl:choose>${mpx.lf}																<xsl:when test=${mpx.quote}attachments/attachment${mpx.quote}>${mpx.lf}																	<xsl:for-each select=${mpx.quote}attachments/attachment${mpx.quote}>${mpx.lf}																		<xsl:value-of select=${mpx.quote}fileName${mpx.quote}/>   ${mpx.lf}																		<input name=${mpx.quote}idInEdit${mpx.quote} type=${mpx.quote}hidden${mpx.quote}>${mpx.lf}																			<xsl:attribute name=${mpx.quote}value${mpx.quote}>${mpx.lf}<xsl:value-of select=${mpx.quote}../../noteId${mpx.quote}/>${mpx.lf}</xsl:attribute>${mpx.lf}																		</input>${mpx.lf}																		<xsl:choose>${mpx.lf}																			<xsl:when test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}																			</xsl:when>${mpx.lf}																			<xsl:otherwise>${mpx.lf}																				<a href=${mpx.quote}javascript: document.forms[0].elements['methodToCall'].value = 'deleteAttachment'; document.forms[0].submit();${mpx.quote}>delete</a>  ${mpx.lf}	                    									<xsl:variable name=${mpx.quote}hrefStr${mpx.quote}>attachment?attachmentId=<xsl:value-of select=${mpx.quote}attachmentId${mpx.quote}/>${mpx.lf}</xsl:variable>${mpx.lf}																				<a href=${mpx.quote}{$hrefStr}${mpx.quote}>download</a>${mpx.lf}	                     								</xsl:otherwise>${mpx.lf}	                     							</xsl:choose>${mpx.lf}																	</xsl:for-each>${mpx.lf}																</xsl:when>${mpx.lf}																<xsl:otherwise>${mpx.lf}																	<br/>${mpx.lf}																	Attachment:${mpx.lf}																	<input name=${mpx.quote}file${mpx.quote} type=${mpx.quote}file${mpx.quote}>${mpx.lf}																		<xsl:if test=${mpx.quote}$globalReadOnly = 'true'${mpx.quote}>${mpx.lf}																			<xsl:attribute name=${mpx.quote}disabled${mpx.quote}>disabled</xsl:attribute>${mpx.lf}																		</xsl:if>${mpx.lf}																	</input>${mpx.lf}																</xsl:otherwise>${mpx.lf}															</xsl:choose>${mpx.lf}														</xsl:if>${mpx.lf}													</xsl:when>${mpx.lf}													<xsl:otherwise>${mpx.lf}														<xsl:value-of select=${mpx.quote}noteText${mpx.quote}/>${mpx.lf}														<br/>${mpx.lf}														<br/>${mpx.lf}														<xsl:if test=${mpx.quote}$showAttachments = 'true'${mpx.quote}>${mpx.lf}															<xsl:for-each select=${mpx.quote}attachments/attachment${mpx.quote}>${mpx.lf}																<xsl:value-of select=${mpx.quote}fileName${mpx.quote}/>   ${mpx.lf}	                    					<xsl:variable name=${mpx.quote}hrefStr${mpx.quote}>attachment?attachmentId=<xsl:value-of select=${mpx.quote}attachmentId${mpx.quote}/>${mpx.lf}</xsl:variable>${mpx.lf}																<a href=${mpx.quote}{$hrefStr}${mpx.quote}>download</a>${mpx.lf}															</xsl:for-each>${mpx.lf}														</xsl:if>${mpx.lf}													</xsl:otherwise>${mpx.lf}												</xsl:choose>${mpx.lf}											</td>${mpx.lf}											<td class=${mpx.quote}datacell${mpx.quote}>${mpx.lf}												<xsl:choose>${mpx.lf}													<xsl:when test=${mpx.quote}editingNote = 'true' and authorizedToEdit = 'true' and $globalReadOnly != 'true'${mpx.quote}>${mpx.lf}														<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}															<img border=${mpx.quote}0${mpx.quote} height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} src=${mpx.quote}images/tinybutton-save.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}40${mpx.quote}>${mpx.lf}																<xsl:attribute name=${mpx.quote}onclick${mpx.quote}>document.forms[0].elements['methodToCall'].value = 'save';${mpx.lf}																	document.forms[0].elements['noteIdNumber'].value = <xsl:value-of select=${mpx.quote}noteId${mpx.quote}/>;${mpx.lf}																	document.forms[0].submit();${mpx.lf}																</xsl:attribute>${mpx.lf}															</img>${mpx.lf}															<img border=${mpx.quote}0${mpx.quote} height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} onclick=${mpx.quote}document.forms[0].elements['methodToCall'].value = 'cancel'; document.forms[0].submit();${mpx.quote} src=${mpx.quote}images/tinybutton-cancel.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}40${mpx.quote}/>${mpx.lf}														</div>${mpx.lf}													</xsl:when>${mpx.lf}													<xsl:otherwise>${mpx.lf}														<xsl:choose>${mpx.lf}															<xsl:when test=${mpx.quote}../../showEdit != 'yes' and authorizedToEdit = 'true' and $globalReadOnly !='true'${mpx.quote}>${mpx.lf}																<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}																	<img border=${mpx.quote}0${mpx.quote} height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} src=${mpx.quote}images/tinybutton-edit1.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}40${mpx.quote}>${mpx.lf}																		<xsl:attribute name=${mpx.quote}onclick${mpx.quote}>document.forms[0].elements['methodToCall'].value = 'edit';${mpx.lf}																			document.forms[0].elements['noteIdNumber'].value = <xsl:value-of select=${mpx.quote}noteId${mpx.quote}/>;${mpx.lf}																			document.forms[0].submit();${mpx.lf}																		</xsl:attribute>${mpx.lf}																	</img>${mpx.lf}																	<img border=${mpx.quote}0${mpx.quote} height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} src=${mpx.quote}images/tinybutton-delete1.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}40${mpx.quote}>${mpx.lf}																		<xsl:attribute name=${mpx.quote}onclick${mpx.quote}>document.forms[0].elements['methodToCall'].value = 'delete';${mpx.lf}																			document.forms[0].elements['noteIdNumber'].value = <xsl:value-of select=${mpx.quote}noteId${mpx.quote}/>;${mpx.lf}																			document.forms[0].submit();${mpx.lf}																		</xsl:attribute>${mpx.lf}																	</img>${mpx.lf}																</div>${mpx.lf}															</xsl:when>${mpx.lf}															<xsl:otherwise>${mpx.lf}																<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}																	<img height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} src=${mpx.quote}images/tinybutton-edit1-disable.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}40${mpx.quote}/>${mpx.lf}																	<img height=${mpx.quote}15${mpx.quote} src=${mpx.quote}images/tinybutton-delete1-disabled.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}40${mpx.quote}/>${mpx.lf}																</div>${mpx.lf}															</xsl:otherwise>${mpx.lf}														</xsl:choose>${mpx.lf}													</xsl:otherwise>${mpx.lf}												</xsl:choose>${mpx.lf}											</td>${mpx.lf}										</tr>${mpx.lf}									</xsl:for-each>${mpx.lf}								</xsl:when>${mpx.lf}								<xsl:otherwise>${mpx.lf}									<xsl:if test=${mpx.quote}//NoteForm/showAdd != 'true'${mpx.quote}>${mpx.lf}										<tr>${mpx.lf}											<td class=${mpx.quote}thnormal2${mpx.quote}>${mpx.lf}												<table border=${mpx.quote}0${mpx.quote} cellpadding=${mpx.quote}0${mpx.quote} cellspacing=${mpx.quote}0${mpx.quote} height=${mpx.quote}100%${mpx.quote} width=${mpx.quote}100%${mpx.quote}>${mpx.lf}													<tbody>${mpx.lf}														<tr>${mpx.lf}															<td align=${mpx.quote}center${mpx.quote} class=${mpx.quote}spacercell${mpx.quote} valign=${mpx.quote}middle${mpx.quote}>${mpx.lf}																<div align=${mpx.quote}center${mpx.quote}>${mpx.lf}																	<br/>${mpx.lf}																	<br/>${mpx.lf}																	<br/>${mpx.lf}																	<p>No notes available </p>${mpx.lf}																	<xsl:if test=${mpx.quote}//NoteForm/authorizedToAdd = 'true'${mpx.quote}>${mpx.lf}																		<p>${mpx.lf}																			<img border=${mpx.quote}0${mpx.quote} height=${mpx.quote}15${mpx.quote} hspace=${mpx.quote}3${mpx.quote} onclick=${mpx.quote}document.forms[0].elements['methodToCall'].value = 'add'; document.forms[0].submit();${mpx.quote} src=${mpx.quote}images/tinybutton-addnote.gif${mpx.quote} vspace=${mpx.quote}3${mpx.quote} width=${mpx.quote}66${mpx.quote}/>${mpx.lf}																		</p>${mpx.lf}																	</xsl:if>${mpx.lf}																</div>${mpx.lf}															</td>${mpx.lf}														</tr>${mpx.lf}													</tbody>${mpx.lf}												</table>${mpx.lf}											</td>${mpx.lf}										</tr>${mpx.lf}									</xsl:if>${mpx.lf}								</xsl:otherwise>${mpx.lf}							</xsl:choose>${mpx.lf}						</table>${mpx.lf}					</xsl:if>${mpx.lf}				</xsl:template>${mpx.lf}                <xsl:template name=${mpx.quote}lookup${mpx.quote}>${mpx.lf}                  <xsl:param name=${mpx.quote}fieldName${mpx.quote}/>${mpx.lf}                  <xsl:param name=${mpx.quote}readOnly${mpx.quote}/>${mpx.lf}                  <xsl:if test=${mpx.quote}$globalReadOnly != 'true' and $readOnly != 'true'${mpx.quote}>${mpx.lf}                    <xsl:if test=${mpx.quote}//fieldDef[@name=$fieldName]/lookup${mpx.quote}>${mpx.lf}                      <input name=${mpx.quote}userAction.performLookup.{$fieldName}${mpx.quote} onclick=${mpx.quote}buttonClick('performLookup');${mpx.quote} src=${mpx.quote}images/searchicon.gif${mpx.quote} type=${mpx.quote}image${mpx.quote} value=${mpx.quote}performLookup.{$fieldName}${mpx.quote}/>${mpx.lf}                    </xsl:if>${mpx.lf}                  </xsl:if>${mpx.lf}                </xsl:template>${mpx.lf}			</xsl:stylesheet>${mpx.lf}","1","1","F7586A9C3E6B1F6EE0406E0AC31D1D3A"
