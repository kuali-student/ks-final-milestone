<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.kuali.student.enroll</groupId>
        <artifactId>ks-enroll</artifactId>
        <version>0.2.0-FR2-M1-build-917</version>
    </parent>
    <artifactId>ks-enroll-impl</artifactId>
    <name>KS Enroll Impl</name>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <!--
                Setting reuseForks to false. Multiple dao tests using Spring
                junit class runner doesn't play nice with each other
                -->
                <configuration>
                    <reuseForks>false</reuseForks>
                    <argLine>-Xms256m -Xmx512m</argLine>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>org.kuali.student.api</groupId>
            <artifactId>ks-enroll-api</artifactId>
            <version>${ks.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.api</groupId>
            <artifactId>ks-core-api</artifactId>
            <version>${ks.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.core</groupId>
            <artifactId>ks-core-krms</artifactId>
            <version>${ks.core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.core</groupId>
            <artifactId>ks-common-impl</artifactId>
            <version>${ks.core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.core</groupId>
            <artifactId>ks-core-impl</artifactId>
            <version>${ks.core.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <!-- Add to be able to use LuDao on CluService as per discussion with Kamal -->
        <dependency>
            <groupId>org.kuali.student.core</groupId>
            <artifactId>ks-common-test</artifactId>
            <version>${ks.core.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.core</groupId>
            <artifactId>ks-hibernate</artifactId>
            <version>${ks.core.version}</version>
            <type>pom</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.lum</groupId>
            <artifactId>ks-lum-impl</artifactId>
            <version>${ks.lum.version}</version>
        </dependency>
        <dependency>
            <groupId>org.kuali.student.lum</groupId>
            <artifactId>ks-lum-impl</artifactId>
            <version>${ks.lum.version}</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.kuali.rice</groupId>
            <artifactId>rice-it-internal-tools</artifactId>
        </dependency>
        <dependency>
            <groupId>antlr</groupId>
            <artifactId>antlr</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>backport-util-concurrent</groupId>
            <artifactId>backport-util-concurrent</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- This is needed for JSON in KSB REST Services-->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-jaxrs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-xc</artifactId>
        </dependency>
        <!-- Rabbit MQ is being evaluated as an MQ solution-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jms</artifactId>
        </dependency>
        <!-- needed for CR status to client communication -->
        <!--<dependency>-->
        <!--<groupId>org.springframework</groupId>-->
        <!--<artifactId>spring-messaging</artifactId>-->
        <!--<version>${spring.version}</version>-->
        <!--</dependency>-->
        <!-- needed to support jms (Caused by: java.lang.ClassNotFoundException: org.apache.xbean.spring.context.v2.XBeanNamespaceHandler) -->
        <dependency>
            <groupId>org.apache.xbean</groupId>
            <artifactId>xbean-spring</artifactId>
        </dependency>
        <!-- end -->
        <!-- ActiveMQ -->
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-broker</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-spring</artifactId>
        </dependency>
        <!-- for HttpRequest in JAXRS services -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-camel</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jaxb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test-spring</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-kahadb-store</artifactId>
        </dependency>
        <!-- Spring Batch dependencies -->
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.batch</groupId>
            <artifactId>spring-batch-infrastructure</artifactId>
        </dependency>
        <!-- Playing with elastic search -->
        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kubek2k</groupId>
            <artifactId>springockito</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http-jetty</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>rest-assured</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito</artifactId>
        </dependency>
    </dependencies>
    <profiles>
        <profile>
            <id>skip-unit-tests</id>
            <activation>
                <property>
                    <name>skipUTs</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
