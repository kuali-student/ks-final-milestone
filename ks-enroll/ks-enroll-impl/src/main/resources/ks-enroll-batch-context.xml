<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
                            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- stored job-meta in database -->
    <!--bean id="jobRepository"
        class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="transactionManager" ref="transactionManager" />
        <property name="databaseType" value="mysql" />
    </bean-->

    <bean id="jobInstanceDao" class="org.springframework.batch.core.repository.dao.MapJobInstanceDao"/>
    <bean id="jobExecutionDao" class="org.springframework.batch.core.repository.dao.MapJobExecutionDao"/>
    <bean id="stepExecutionDao" class="org.springframework.batch.core.repository.dao.MapStepExecutionDao"/>
    <bean id="executionContextDao" class="org.springframework.batch.core.repository.dao.MapExecutionContextDao"/>

    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.SimpleJobRepository">
        <constructor-arg>
            <ref bean="jobInstanceDao"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="jobExecutionDao"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="stepExecutionDao"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="executionContextDao"/>
        </constructor-arg>
    </bean>

    <bean id="jobExplorer"
          class="org.springframework.batch.core.explore.support.SimpleJobExplorer">
        <constructor-arg>
            <ref bean="jobInstanceDao"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="jobExecutionDao"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="stepExecutionDao"/>
        </constructor-arg>
        <constructor-arg>
            <ref bean="executionContextDao"/>
        </constructor-arg>
    </bean>

    <!-- Transaction manager -->
    <bean id="jobRepository-transactionManager"
          class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>
    <!-- Simple launcher for job -->
    <bean id="jobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <!-- Define a job -->
    <job id="examOfferingSlottingJob" xmlns="http://www.springframework.org/schema/batch"
         job-repository="jobRepository">
        <step id="step0" next="step1">
            <tasklet ref="initializeSlotting"
                           transaction-manager="jobRepository-transactionManager">
            </tasklet>
        </step>
        <step id="step1" next="step2">
            <tasklet transaction-manager="jobRepository-transactionManager">
                <chunk reader="coItemReader" processor="eoGenerationProcessor" writer="eoResultWriter"
                    commit-interval="1">
                </chunk>
            </tasklet>
        </step>
        <step id="step2">
            <tasklet ref="completeSlotting"
                           transaction-manager="jobRepository-transactionManager">
            </tasklet>
        </step>
        <listeners>
            <listener ref="contextListener"/>
        </listeners>
    </job>

    <!-- Initial step to update the eo slotting state on the soc -->
    <bean id="initializeSlotting"
          class="org.kuali.student.enrollment.class2.examoffering.batch.ExamOfferingSlottingStateTasklet" scope="step">
        <property name="socId" value="#{jobParameters['kuali.batch.socId']}" />
        <property name="context" value="#{jobExecutionContext['kuali.batch.context']}" />
        <property name="stateKey" value="kuali.eo.slotting.state.inprogress"/>
        <property name="socService" ref="CourseOfferingSetService"/>
    </bean>

    <bean id="coItemReader" class="org.kuali.student.enrollment.class2.examoffering.batch.CourseOfferingItemReader" scope="step">
        <property name="socId" value="#{jobParameters['kuali.batch.socId']}" />
        <property name="context" value="#{jobExecutionContext['kuali.batch.context']}" />
        <property name="courseOfferingService" ref="CourseOfferingService"/>
        <property name="socService" ref="CourseOfferingSetService"/>
    </bean>

    <bean id="eoGenerationProcessor" class="org.kuali.student.enrollment.class2.examoffering.batch.ExamOfferingSlottingProcessor" scope="step">
        <property name="context" value="#{jobExecutionContext['kuali.batch.context']}" />
        <property name="examOfferingServiceFacade" ref="examOfferingServiceFacade"/>
    </bean>

    <bean id="eoResultWriter" class="org.kuali.student.enrollment.class2.examoffering.batch.ExamOfferingResultWriter" scope="step"/>

    <bean id="completeSlotting"
          class="org.kuali.student.enrollment.class2.examoffering.batch.ExamOfferingSlottingStateTasklet" scope="step">
        <property name="socId" value="#{jobParameters['kuali.batch.socId']}" />
        <property name="context" value="#{jobExecutionContext['kuali.batch.context']}" />
        <property name="stateKey" value="kuali.eo.slotting.state.completed"/>
        <property name="socService" ref="CourseOfferingSetService"/>
    </bean>

    <!-- Listener to setup contextInfo, use details from original user that started the job -->
    <bean id="contextListener" class="org.kuali.student.enrollment.batch.listener.ContextInfoExecutionListener"/>

    <!-- Scheduler definition -->
    <task:scheduler id="scheduler" pool-size="5"/>

    <bean id="batchScheduler" class="org.kuali.student.enrollment.batch.impl.BatchSchedulerImpl">
        <property name="scheduler" ref="scheduler"/>
        <property name="jobLauncher" ref="jobLauncher"/>
        <property name="jobExplorer" ref="jobExplorer"/>
        <property name="jobMap">
            <map>
                <entry key="kuali.batch.job.examOffering.slotting" value-ref="examOfferingSlottingJob"/>
            </map>
        </property>
    </bean>

</beans>
