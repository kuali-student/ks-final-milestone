/*------------------- Colors ---------------------------*/

@black:                   #000;
@white:                   #fff;

// Grays
// -------------------------
@darkGray:                #333333;
@lightGray:               #666666;


// Accent colors
// -------------------------
@blue:                    #049cdb;
@blueDark:                #0064cd;
@green:                   #46a546;
@red:                     #FF0000;
@darkRed:                 #a3403c;

//custom mobile colors
@bodyColor:               #F4F4F4;
@bodyColorDark:           #D7D7D7;
@sectionColor:            #F4F4F4;
@whiteBackground:         #FFFFFF;
@cardBackgroundColor:     @whiteBackground;
@dropCourse-background:   #FCFCFC;


//Mask
@mask-bgColor:            @black;

//Card Badge
@badgeColor:              @lightGray;

// Text
@primaryTextColor:        @darkGray;
@secondaryTextColor:      @lightGray;
@whiteText:               #F8F8F8;
@textColor:               @black;
@cardTextColor:           @lightGray;
@badgeTextColor:          #F2F2F2;
@headerFontColor:         @whiteText;

@menuHoverColor:          #EBEBEB;

// Fading colors
@backgroundColor--highlight: rgba(255, 255, 204, 0.5);    //#FFFFCC;
@shadowColor--highlight:     rgba(255, 255, 0, 0.5); //#FFFF00;
@textColor--highlight:       #ffff7f;


// -------------------------
// Buttons
// -------------------------
@buttonRadius:4px;

// Base button
// -------------------------
@btnBaseBg1:                #F8F8F8;
@btnBaseBg2:                #EFEFEF;
@btnBaseBorder:             #BCBCBC;
@btnBaseText:               #333333;

// Base button - hover
@btnBaseBg1-hover:          #E6E6E6;
@btnBaseBg2-hover:          #DFDFDF;
@btnBaseBorder-hover:       #ADADAD;
@btnBaseText-hover:         @darkGray;

// Base button - pressed
@btnBaseBg1-pressed:        #C1C1C1;
@btnBaseBg2-pressed:        #DFDFDF;
@btnBaseBorder-pressed:     #ADADAD;
@btnBaseText-pressed:       @darkGray;

// Base button - disabled
@btnBaseBg1-disabled:       #FEFEFE;
@btnBaseBg2-disabled:       @btnBaseBg1-disabled;
@btnBaseBorder-disabled:    #DEDEDE;
@btnBaseText-disabled:      #A9A9A9;


// Primary button
// -------------------------
@btnPrimaryBg1:             #428BCA;
@btnPrimaryBg2:             #3378B7;
@btnPrimaryBorder:          #3174B0;
@btnPrimaryText:            #F2F2F2;

// Primary button - hover
@btnPrimaryBg1-hover:       #3071A9;
@btnPrimaryBg2-hover:       #2C669A;
@btnPrimaryBorder-hover:    #285EAE;
@btnPrimaryText-hover:      @btnPrimaryText;

// Primary button - pressed
@btnPrimaryBg1-pressed:     #214B72 25%;
@btnPrimaryBg2-pressed:     #2C669A;
@btnPrimaryBorder-pressed:  #285EAE;
@btnPrimaryText-pressed:    @btnPrimaryText;

// Primary button - disabled
@btnPrimaryBg1-disabled:    #84BBDC;
@btnPrimaryBg2-disabled:    #84BBDC;
@btnPrimaryBorder-disabled: #8EA9B9;
@btnPrimaryText-disabled:   #E4EFF7;



// -------------------------
// Highlight
// -------------------------
@highlightColor:          #FFFF99;

//legend
@waitlistedBgColor:       rgba(255, 255, 255, 0.75);

// Links
@linkColor:               #5580FF;
@linkColorHover:          darken(@linkColor, 25%);

// System Messages
@successText:             #3B723B;
@successBackground:       #dff0d8;
@successBorder:           #D6E9C6;

@infoText:                #2A617D;
@infoBackground:          #D9EDF7;
@infoBorder:              #BCE8F1;

@warningText:             #83652E;
@warningBackground:       #FCF8E3;
@warningBorder:           #FBEED5;

@errorText:               @darkRed;
@errorBackground:         #F2DEDE;
@errorBorder:             #EFD3D7;


//Font Icon
@removeIconColor:         #818185;

// Borders
@border-color:            #AAAAAA;
@border-light-color:      #F2F2F2;
@border-dark-color:      @bodyColorDark;
@cardBorderColor:         #E4E4E4;


//Table
@table-SelectedBackgroundColor:        #C4C4C4;
@table-SelectedRowBackgroundColor:     #eff7fd;

//Course search
@searchDetailsSelectedBackgroundColor: @table-SelectedRowBackgroundColor;
@searchDetailsUnselectedBgColor:  #E4E4E4;


// Form option lists
// -------------------------
@optionBackground:        #D5E8FF;
@optionBorder:            @optionBackground;
@optionOutline:           @optionBackground;
@optionText:              @optionBackgroundSelected;
@optionBackgroundSelected:#3366FF;
@optionBorderSelected:    @optionBackground;
@optionOutlineSelected:   @optionBackgroundSelected;
@optionTextSelected:      @white;



// Dropdowns
// -------------------------
@dropdownBackground:      @white;
@dropdownBorder:          rgba(0,0,0,.2);
@dropdownDividerTop:      #e5e5e5;
@dropdownDividerBottom:   @white;

@dropdownLinkColor:       @darkGray;
@dropdownLinkColorHover:  @white;
@dropdownLinkColorActive: @white;

//@dropdownLinkBackgroundActive:  @linkColor;
//@dropdownLinkBackgroundHover:   @dropdownLinkBackgroundActive;

// Seats Colors
@activityOfferingSelectedColor: @red;
@noSeatAvailableColor:          @green;

// Misc
@transparent: rgba(0,0,0,0);

//Skeleton colors
@skeletonBlue:            #D6E0FF;
@skeletonLightGray:       #E9E9E9;
@skeletonDarkGray:        #D7D7D7;

// Main Heading Toggle Control
@toggleSelectedBgColor:   #AAD5F4;

/*------------------- END KS NEW COLOR DEFINITIONS --------------------------*/



/*------------------- Calendar Colors -------------------*/
@courseCardColor1:  #334D5C;
@courseCardColor2:  #3d9c89;
@courseCardColor3:  #E27A3F;
@courseCardColor4:  #DF4949;
@courseCardColor5:  #3498DB;
@courseCardColor6:  #BF927D;
@courseCardColor7:  #8F6579;
@courseCardColor8:  #8E44AD;
@courseCardColor9:  #5B7D48;
@courseCardColor10: #3A6394;

//Alt colors
@courseCardColor11: #7b8c96;
@courseCardColor12: #81bfb3;
@courseCardColor13: #eca983;
@courseCardColor14: #ea8989;
@courseCardColor15: #7cbce8;
@courseCardColor16: #d6b8ab;
@courseCardColor17: #b79ba8;
@courseCardColor18: #b686ca;
@courseCardColor19: #95ab8b;
@courseCardColor20: #809aba;

/**
 * Algorithm for defining the course color for a given index
 * The current algorithm takes the base set of 20 colors and repeats variants of them up to 100.
 * Calculations done manipulate the colors using the color wheel which has 360 degrees.
 * This is useful for understanding color theory: http://www.tigercolor.com/color-lab/color-theory/color-theory-intro.htm
 *
 *     1 - 20  = Base set
 *    21 - 40  = Complementary colors to base set (180 degree)
 *    41 - 60  = Right Analogous colors to base set (30 degree)
 *    61 - 80  = Left Analogous colors to base set (-30 degree)
 *    81 - 100 = Complementary of Right Analogous colors of base set (210 degree)
 *   101 - 120 = Complementary of Left Analogous colors of base set (150 degree)
 *
 * If you assume the base colors are at the bottom of a circle, it can be visualize as:
 *  1. | - straight across
 *  2. \ - shift right then across
 *  3. / - shift left then across
 */
@courseCardColorCount: 120; // # of colors to calculate for

.defineCourseColor(@n) when (@n =< 20) {
    @tmp: 'courseCardColor@{n}';
    @courseColor: @@tmp;
}

.defineCourseColor(@n) when (20 < @n) and (@n =< 40) {
    @n1: @n - 20; // Reuse the first 20 colors
    @tmp: 'courseCardColor@{n1}';
    @courseColor: spin(@@tmp, 180);
}

.defineCourseColor(@n) when (40 < @n) and (@n =< 60) {
    @n1: @n - 40; // Reuse the first 20 colors
    @tmp: 'courseCardColor@{n1}';
    @courseColor: spin(@@tmp, 30);
}

.defineCourseColor(@n) when (60 < @n) and (@n =< 80) {
    @n1: @n - 60; // Reuse the first 20 colors
    @tmp: 'courseCardColor@{n1}';
    @courseColor: spin(@@tmp, 210);
}

.defineCourseColor(@n) when (80 < @n) and (@n =< 100) {
    @n1: @n - 80; // Reuse the first 20 colors
    @tmp: 'courseCardColor@{n1}';
    @courseColor: spin(@@tmp, -30);
}

.defineCourseColor(@n) when (100 < @n) and (@n =< 120) {
    @n1: @n - 100; // Reuse the first 20 colors
    @tmp: 'courseCardColor@{n1}';
    @courseColor: spin(@@tmp, 150);
}

// To handle fringe cases, default to the first defined color for everything else
.defineCourseColor(@n) when (120 < @n) {
    @courseColor: @courseCardColor1;
}


/**
 * This mixin defines a primary and a secondary color to contrast against a provided color.
 * It is to be used as part of a color palette generation algorithm to provide
 * colors that pass contrast compatibility standards (7:1 for WCAG AAA).
 *
 * The calculation first takes the base color and tries to see if it can be tweaked enough to meet the desired contrast ratio.
 * If it can, the primary contrast color will be the tweaked color and the secondary contrast color will be set to the base color.
 *
 * If the base color cannot be tweaked to meet the desired contrast ratio,
 * a color within the same HSL space is picked that meets the contrast ratio against WHITE.
 * In this case, the primary contrast color will be set to WHITE and the secondary will be set to the new color.
 *
 * Formula to calculate contrast ratio between 2 colors (assume luma(color1) > luma(color2))
 *      http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
 *      ratio = (luma(color1) + .05) / (luma(color2) + .05)
 *
 * @param @base - Base color to work with
 * @param @ratio - Integer for target contrast ratio (optional, defaults to @courseCardColorContrastRatio) - e.g. 7 for a 7:1 ratio
 *
 * @output @primaryContrastColor - Primary contrasting color (tweaked color that meets ratio || white)
 * @output @secondaryContrastColor - Secondary contrasting color (base color if tweakable to meet ratio || base color tweaked to meet ratio with white)
 */
@courseCardColorContrastRatio: 7; // Contrast ratio of at least 7:1 for WCAG2.0 AAA
.defineCourseContrastColors(@base, @ratio: @courseCardColorContrastRatio) {

    // Create some helper methods and make them avaiable via JavaScript
    @apiInjector: `(function() { this.api = {}; return "Injected"; })()`;
    @apiInjector: `api.contrastRatio = function(luma1, luma2) { var l1 = luma1 + .05, l2 = luma2 + .05, r = l1 / l2; return (l2 > l1 ? 1 / r : r); }`;
    @apiInjector: `api.calculateTargetLuma = function(luma, ratio) { var targetLuma = ((luma + .05) / ratio) - .05; return (targetLuma > 0 ? targetLuma : 1); }`; // If it can be darkened enough, cool. Otherwise, go with white (1).


    @_baseLuma: unit(luma(@base)) / 100;
    @_baseLightness: round(unit(lightness(@base)) / 100, 2);

    @_primaryLuma: `api.calculateTargetLuma(@{_baseLuma}, @{ratio})`;
    // Calculations so far are in luma's, we need to go back to Lightness to stay in line with what HSL expects.
    // This is uses a simple proportion to 'approximate' the target lightness. If anyone is up for busting out the actual formula, dive in.
    @_primaryLightness: round((@_baseLightness * @_primaryLuma) / @_baseLuma, 2);
    @primaryContrastColor: hsl(hue(@base), saturation(@base), @_primaryLightness);

    // Since we are only approximating the luma > lightness conversion, we need to get the actual new luma for the primary color.
    @_primaryNewLuma: unit(luma(@primaryContrastColor)) / 100;
    @_primaryContrastRatio: `api.contrastRatio(@{_baseLuma}, @{_primaryNewLuma})`;

    @_secondaryLuma: `(function() { return (api.contrastRatio(@{_baseLuma}, @{_primaryNewLuma}) >= @{ratio} ? @{_baseLuma} : api.calculateTargetLuma(@{_primaryNewLuma}, @{ratio})); })()`;
    @_secondaryLightness: round(`(function() { var lightness = @{_baseLightness}; if (@{ratio} > @{_primaryContrastRatio}) { lightness = (lightness * @{_secondaryLuma}) / @{_baseLuma}; } return lightness; })()`, 2);
    @secondaryContrastColor: hsl(hue(@base), saturation(@base), @_secondaryLightness);
}

/*-------------------End Calendar Colors -------------------*/